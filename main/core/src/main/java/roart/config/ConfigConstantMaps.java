package roart.config;

import java.util.HashMap;
import java.util.Map;

import roart.common.config.ConfigConstants;
import roart.common.config.XMLType;
import roart.common.constants.CategoryConstants;
import roart.gene.impl.CalcComplexGene;

public class ConfigConstantMaps {
    private static final String CONFIG_DNNL = "{ }";

    private static final String CONFIG_L = "{ \"steps\" : 100 }";

    private static final String CONFIG_LSTM = "{ \"epochs\": 5, \"windowsize\": 3, \"horizon\": 5 }";

    private static final String CONFIG_DNN = "{ \"steps\" : 2000, \"hiddenlayers\" : 3, \"hiddenunits\" : [ 10, 20, 10 ] }";

    private static final String CONFIG_LR = "{ \"maxiter\" : 100, \"tol\" : 1.0E-6 }";

    private static final String CONFIG_MCP = "{ \"maxiter\" : 100, \"layers\" : 2, \"tol\" : 1.0E-6, \"nn\" : [ 1, 1 ] }";

    private static final String CONFIG_OVR = "{ \"maxiter\" : 100, \"tol\" : 1.0E-6, \"fitintercept\" : false }";

    public static Map<String, Class> map = new HashMap();

    public static void makeTypeMap() {
        if (!map.isEmpty()) {
            return;
        }
        map.put(ConfigConstants.DATABASEMAXHOLES, Integer.class);
        map.put(ConfigConstants.DATABASESPARK, Boolean.class);
        map.put(ConfigConstants.DATABASESPARKSPARKMASTER, String.class);
        map.put(ConfigConstants.DATABASEHIBERNATE, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNING, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGMP, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGMPCPU, Double.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKML, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMASTER, String.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKNETWORKTIMEOUT, Integer.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLMCP, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLMCPCONFIG, String.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLLR, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLLRCONFIG, String.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLOVR, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLOVRCONFIG, String.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOW, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNN, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNCONFIG, String.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNL, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNLCONFIG, String.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWL, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLCONFIG, String.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLSTM, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLSTMCONFIG, String.class);
        map.put(ConfigConstants.MACHINELEARNINGTENSORFLOWSERVER, String.class);
        map.put(ConfigConstants.INDICATORS, Boolean.class);
        map.put(ConfigConstants.INDICATORSMOVE, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACD, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDMACDHISTOGRAMDELTA, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDMACDHISTOGRAMDELTADAYS, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDMACDMACDDELTA, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDMACDMACDDELTADAYS, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDMACDSIGNALDELTA, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDMACDSIGNALDELTADAYS, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMEND, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDBUY, String.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTHISTOGRAM, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTHISTOGRAMDELTA, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNAL, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNALDELTA, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNAL, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNALDELTA, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDSELL, String.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTHISTOGRAM, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTHISTOGRAMDELTA, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNAL, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNALDELTA, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNAL, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNALDELTA, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDMACHINELEARNING, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGSIGNALML, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGMACDML, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGHISTOGRAMML, Boolean.class);
        map.put(ConfigConstants.INDICATORSMACDDAYSBEFOREZERO, Integer.class);
        map.put(ConfigConstants.INDICATORSMACDDAYSAFTERZERO, Integer.class);
        map.put(ConfigConstants.INDICATORSRSI, Boolean.class);
        map.put(ConfigConstants.INDICATORSRSIDELTA, Boolean.class);
        map.put(ConfigConstants.INDICATORSRSIDELTADAYS, Integer.class);
        map.put(ConfigConstants.INDICATORSRSIRECOMMEND, Boolean.class);
        map.put(ConfigConstants.INDICATORSRSIRECOMMENDBUY, String.class);
        map.put(ConfigConstants.INDICATORSRSIRECOMMENDBUYWEIGHT, Integer.class);
        map.put(ConfigConstants.INDICATORSRSIRECOMMENDBUYWEIGHTDELTA, Integer.class);
        map.put(ConfigConstants.INDICATORSRSIRECOMMENDSELL, String.class);
        map.put(ConfigConstants.INDICATORSRSIRECOMMENDSELLWEIGHT, Integer.class);
        map.put(ConfigConstants.INDICATORSRSIRECOMMENDSELLWEIGHTDELTA, Integer.class);
        map.put(ConfigConstants.INDICATORSSTOCHRSI, Boolean.class);
        map.put(ConfigConstants.INDICATORSSTOCHRSIDELTA, Boolean.class);
        map.put(ConfigConstants.INDICATORSSTOCHRSIDELTADAYS, Integer.class);
        map.put(ConfigConstants.INDICATORSCCI, Boolean.class);
        map.put(ConfigConstants.INDICATORSCCIDELTA, Boolean.class);
        map.put(ConfigConstants.INDICATORSCCIDELTADAYS, Integer.class);
        map.put(ConfigConstants.INDICATORSATR, Boolean.class);
        map.put(ConfigConstants.INDICATORSATRDELTA, Boolean.class);
        map.put(ConfigConstants.INDICATORSATRDELTADAYS, Integer.class);
        map.put(ConfigConstants.INDICATORSSTOCH, Boolean.class);
        map.put(ConfigConstants.INDICATORSSTOCHSTOCHDELTA, Boolean.class);
        map.put(ConfigConstants.INDICATORSSTOCHSTOCHDELTADAYS, Integer.class);
        map.put(ConfigConstants.PREDICTORS, Boolean.class);
        map.put(ConfigConstants.PREDICTORSLSTM, Boolean.class);
  /*
        map.put(ConfigConstants.PREDICTORSLSTMEPOCHS, Integer.class);
        map.put(ConfigConstants.PREDICTORSLSTMHORIZON, Integer.class);
        map.put(ConfigConstants.PREDICTORSLSTMWINDOWSIZE, Integer.class);
*/
        map.put(ConfigConstants.MISC, Boolean.class);
        map.put(ConfigConstants.MISCPERCENTIZEPRICEINDEX, Boolean.class);
        map.put(ConfigConstants.MISCMLSTATS, Boolean.class);
        map.put(ConfigConstants.MISCOTHERSTATS, Boolean.class);
        map.put(ConfigConstants.MISCMYDAYS, Integer.class);
        map.put(ConfigConstants.MISCMYTOPBOTTOM, Integer.class);
        map.put(ConfigConstants.MISCMYTBLEDAYS, Integer.class);
        map.put(ConfigConstants.MISCMYTABLEMOVEINTERVALDAYS, Integer.class);
        map.put(ConfigConstants.MISCMYTABLEINTERVALDAYS, Integer.class);
        map.put(ConfigConstants.MISCMYEQUALIZE, Boolean.class);
        map.put(ConfigConstants.MISCMYGRAPHEQUALIZE, Boolean.class);
        map.put(ConfigConstants.MISCMYGRAPHEQUALIZEUNIFY, Boolean.class);
        map.put(ConfigConstants.MISCFILTERWEEKEND, Boolean.class);
        map.put(ConfigConstants.MISCFILTERHOLIDAY, Boolean.class);
        map.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERSIMPLEFUTUREDAYS, Integer.class);
        map.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERSIMPLEINTERVALDAYS, Integer.class);
        map.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERCOMPLEXFUTUREDAYS, Integer.class);
        map.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERCOMPLEXINTERVALDAYS, Integer.class);
        /*
        map.put(ConfigConstants.TESTRECOMMENDINTERVALTIMES, Integer.class);
        map.put(ConfigConstants.TESTRECOMMENDITERATIONS, Integer.class);
        map.put(ConfigConstants.TESTRECOMMENDPERIOD, String.class);
        map.put(ConfigConstants.TESTRECOMMENDFACTOR, Integer.class);
         */
        map.put(ConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, String.class);
        map.put(ConfigConstants.EVOLVEMLEVOLUTIONCONFIG, String.class);
        /*
        map.put(ConfigConstants.EVOLUTION, String.class);
        //map.put(ConfigConstants.EVOLUTION, Boolean.class);
        map.put(ConfigConstants.EVOLUTIONGENERATIONS, Integer.class);
        map.put(ConfigConstants.EVOLUTIONCHILDREN, Integer.class);
        map.put(ConfigConstants.EVOLUTIONCROSSOVER, Integer.class);
        map.put(ConfigConstants.EVOLUTIONGENERATIONCREATE, Integer.class);
        map.put(ConfigConstants.EVOLUTIONELITE, Integer.class);
        map.put(ConfigConstants.EVOLUTIONELITECLONEANDMUTATE, Integer.class);
        map.put(ConfigConstants.EVOLUTIONMUTATE, Integer.class);
        map.put(ConfigConstants.EVOLUTIONSELECT, Integer.class);
         */
        map.put(ConfigConstants.AGGREGATORS, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDER, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLE, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACD, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUY, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTHISTOGRAM, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTHISTOGRAMDELTA, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNAL, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNALDELTA, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNAL, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNALDELTA, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELL, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTHISTOGRAM, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTHISTOGRAMDELTA, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNAL, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNALDELTA, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNAL, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNALDELTA, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUY, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUYWEIGHTRSI, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUYWEIGHTRSIDELTA, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELL, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELLWEIGHTRSI, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELLWEIGHTRSIDELTA, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACD, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUY, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTHISTOGRAMNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTHISTOGRAMDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELL, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTHISTOGRAMNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTHISTOGRAMDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEX, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUY, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUYWEIGHTRSINODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUYWEIGHTRSIDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELL, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELLWEIGHTRSINODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELLWEIGHTRSIDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATR, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUY, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUYWEIGHTATRNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUYWEIGHTATRDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELL, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELLWEIGHTATRNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELLWEIGHTATRDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUY, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUYWEIGHTCCINODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUYWEIGHTCCIDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELL, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELLWEIGHTCCINODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELLWEIGHTCCIDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCH, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUY, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUYWEIGHTSTOCHNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUYWEIGHTSTOCHDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELL, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELLWEIGHTSTOCHNODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELLWEIGHTSTOCHDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUY, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUYWEIGHTSTOCHRSINODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUYWEIGHTSTOCHRSIDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELL, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELLWEIGHTSTOCHRSINODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELLWEIGHTSTOCHRSIDELTANODE, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOR, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORMACD, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORRSI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORATR, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORCCI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORSTOCH, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORSTOCHRSI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOREXTRAS, String.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOREXTRASDELTAS, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOREXTRASMACD, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOREXTRASRSI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOREXTRASATR, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOREXTRASCCI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOREXTRASRSI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATOREXTRASSTOCHRSI, Boolean.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORFUTUREDAYS, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORINTERVALDAYS, Integer.class);
        map.put(ConfigConstants.AGGREGATORSINDICATORTHRESHOLD, Double.class);
        map.put(ConfigConstants.AGGREGATORSMLMACD, Boolean.class);
	map.put(ConfigConstants.AGGREGATORSMLRSI, Boolean.class);
	map.put(ConfigConstants.AGGREGATORSMLRSIMLCONFIG, String.class);
	map.put(ConfigConstants.AGGREGATORSMLRSIBUY, Object.class);
	map.put(ConfigConstants.AGGREGATORSMLRSIBUYRSILIMIT, Integer.class);
	map.put(ConfigConstants.AGGREGATORSMLRSIBUYSRSILIMIT, Double.class);
	map.put(ConfigConstants.AGGREGATORSMLRSISELL, Object.class);
	map.put(ConfigConstants.AGGREGATORSMLRSISELLRSILIMIT, Integer.class);
	map.put(ConfigConstants.AGGREGATORSMLRSISELLSRSILIMIT, Double.class);
	map.put(ConfigConstants.AGGREGATORSMLRSIDAYSBEFORELIMIT, Integer.class);
	map.put(ConfigConstants.AGGREGATORSMLRSIDAYSAFTERLIMIT, Integer.class);
    }

    public static Map<String, Object> deflt = new HashMap();
    public static void makeDefaultMap() {
        if (!deflt.isEmpty()) {
            return;
        }
        deflt.put(ConfigConstants.DATABASEMAXHOLES, 5);
        deflt.put(ConfigConstants.DATABASESPARK, Boolean.TRUE);
        deflt.put(ConfigConstants.DATABASESPARKSPARKMASTER, "spark://127.0.0.1:7077");
        deflt.put(ConfigConstants.DATABASEHIBERNATE, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNING, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGMP, Boolean.FALSE);
        deflt.put(ConfigConstants.MACHINELEARNINGMPCPU, 0.5);
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKML, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMASTER, "spark://127.0.0.1:7077");
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLMCP, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLMCPCONFIG, CONFIG_MCP);
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLLR, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLLRCONFIG, CONFIG_LR);
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLOVR, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLOVRCONFIG, CONFIG_OVR);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOW, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNN, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNCONFIG, CONFIG_DNN);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNL, Boolean.FALSE);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNLCONFIG, CONFIG_DNNL);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWL, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLCONFIG, CONFIG_L);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLSTM, Boolean.TRUE);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLSTMCONFIG, CONFIG_LSTM);
        deflt.put(ConfigConstants.MACHINELEARNINGTENSORFLOWSERVER, "http://localhost:8000");
        deflt.put(ConfigConstants.INDICATORS, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMOVE, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACD, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDMACDHISTOGRAMDELTA, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDMACDHISTOGRAMDELTADAYS, 3);

        deflt.put(ConfigConstants.INDICATORSMACDMACDMACDDELTA, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDMACDMACDDELTADAYS, 3);
        deflt.put(ConfigConstants.INDICATORSMACDMACDSIGNALDELTA, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDMACDSIGNALDELTADAYS, 3);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMEND, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDBUY, null);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTHISTOGRAM, 40);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTHISTOGRAMDELTA, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNAL, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNALDELTA, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNAL, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNALDELTA, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDSELL, null);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTHISTOGRAM, 40);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTHISTOGRAMDELTA, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNAL, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNALDELTA, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNAL, 20);
        deflt.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNALDELTA, 20);
        deflt.put(ConfigConstants.INDICATORSMACDMACHINELEARNING, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGSIGNALML, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGMACDML, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGHISTOGRAMML, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSMACDDAYSBEFOREZERO, 25);
        deflt.put(ConfigConstants.INDICATORSMACDDAYSAFTERZERO, 10);
        deflt.put(ConfigConstants.INDICATORSRSI, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSRSIDELTA, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSRSIDELTADAYS, 3);
        deflt.put(ConfigConstants.INDICATORSRSIRECOMMEND, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSRSIRECOMMENDBUY, null);
        deflt.put(ConfigConstants.INDICATORSRSIRECOMMENDBUYWEIGHT, 50);
        deflt.put(ConfigConstants.INDICATORSRSIRECOMMENDBUYWEIGHTDELTA, 50);
        deflt.put(ConfigConstants.INDICATORSRSIRECOMMENDSELL, null);
        deflt.put(ConfigConstants.INDICATORSRSIRECOMMENDSELLWEIGHT, 50);
        deflt.put(ConfigConstants.INDICATORSRSIRECOMMENDSELLWEIGHTDELTA, 50);
        deflt.put(ConfigConstants.INDICATORSSTOCHRSI, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSSTOCHRSIDELTA, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSSTOCHRSIDELTADAYS, 3);
        deflt.put(ConfigConstants.INDICATORSCCI, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSCCIDELTA, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSCCIDELTADAYS, 3);
        deflt.put(ConfigConstants.INDICATORSATR, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSATRDELTA, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSATRDELTADAYS, 3);
        deflt.put(ConfigConstants.INDICATORSSTOCH, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSSTOCHSTOCHDELTA, Boolean.TRUE);
        deflt.put(ConfigConstants.INDICATORSSTOCHSTOCHDELTADAYS, 3);
        deflt.put(ConfigConstants.PREDICTORS, Boolean.TRUE);
        deflt.put(ConfigConstants.PREDICTORSLSTM, Boolean.TRUE);
/*
        deflt.put(ConfigConstants.PREDICTORSLSTMEPOCHS, 5);
        deflt.put(ConfigConstants.PREDICTORSLSTMHORIZON, 5);
        deflt.put(ConfigConstants.PREDICTORSLSTMWINDOWSIZE, 3);
  */
        deflt.put(ConfigConstants.MISC, Boolean.TRUE);
        deflt.put(ConfigConstants.MISCPERCENTIZEPRICEINDEX, Boolean.TRUE);
        deflt.put(ConfigConstants.MISCMLSTATS, Boolean.TRUE);
        deflt.put(ConfigConstants.MISCOTHERSTATS, Boolean.TRUE);
        deflt.put(ConfigConstants.MISCMYDAYS, 180);
        deflt.put(ConfigConstants.MISCMYTOPBOTTOM, 10);
        deflt.put(ConfigConstants.MISCMYTBLEDAYS, 180);
        deflt.put(ConfigConstants.MISCMYTABLEMOVEINTERVALDAYS, 5);
        deflt.put(ConfigConstants.MISCMYTABLEINTERVALDAYS, 1);
        deflt.put(ConfigConstants.MISCMYEQUALIZE, Boolean.TRUE);
        deflt.put(ConfigConstants.MISCMYGRAPHEQUALIZE, Boolean.TRUE);
        deflt.put(ConfigConstants.MISCMYGRAPHEQUALIZEUNIFY, Boolean.TRUE);
        deflt.put(ConfigConstants.MISCFILTERWEEKEND, Boolean.TRUE);
        deflt.put(ConfigConstants.MISCFILTERHOLIDAY, Boolean.TRUE);
        deflt.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERCOMPLEXFUTUREDAYS, 10);
        deflt.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERCOMPLEXINTERVALDAYS, 5);
        deflt.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERSIMPLEFUTUREDAYS, 10);
        deflt.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERSIMPLEINTERVALDAYS, 5);
        /*
        deflt.put(ConfigConstants.TESTRECOMMENDINTERVALTIMES, 10);
        deflt.put(ConfigConstants.TESTRECOMMENDITERATIONS, 100);
        deflt.put(ConfigConstants.TESTRECOMMENDPERIOD, CategoryConstants.PRICE);
        deflt.put(ConfigConstants.TESTRECOMMENDFACTOR, 10);
         */
        deflt.put(ConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, "{ \"generations\" : 100, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 16, \"mutate\" : 2, \"generationcreate\" : 1, \"useoldelite\" : true }");
        deflt.put(ConfigConstants.EVOLVEMLEVOLUTIONCONFIG, "{ \"generations\" : 10, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 4, \"mutate\" : 2, \"generationcreate\" : 1, \"useoldelite\" : true }");
        /*
        deflt.put(ConfigConstants.EVOLUTIONGENERATIONS, 2);
        deflt.put(ConfigConstants.EVOLUTIONCHILDREN, 4);
        //deflt.put(ConfigConstants.EVOLUTION, Boolean.FALSE);
        deflt.put(ConfigConstants.EVOLUTION, "");
        deflt.put(ConfigConstants.EVOLUTIONELITE, 1);
        deflt.put(ConfigConstants.EVOLUTIONELITECLONEANDMUTATE, 0);
        deflt.put(ConfigConstants.EVOLUTIONMUTATE, 1);
        deflt.put(ConfigConstants.EVOLUTIONCROSSOVER, 1);
        deflt.put(ConfigConstants.EVOLUTIONGENERATIONCREATE, 0);
        deflt.put(ConfigConstants.EVOLUTIONSELECT, 16);
         */
        deflt.put(ConfigConstants.AGGREGATORS, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDER, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLE, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACD, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUY, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTHISTOGRAM, 40);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTHISTOGRAMDELTA, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNAL, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNALDELTA, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNAL, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNALDELTA, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTHISTOGRAM, 40);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTHISTOGRAMDELTA, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNAL, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNALDELTA, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNAL, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNALDELTA, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSI, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUYWEIGHTRSI, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUYWEIGHTRSIDELTA, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELLWEIGHTRSI, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELLWEIGHTRSIDELTA, 20);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEX, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACD, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUY, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTHISTOGRAMNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTHISTOGRAMDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTHISTOGRAMNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTHISTOGRAMDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSI, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUY, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUYWEIGHTRSINODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUYWEIGHTRSIDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELLWEIGHTRSINODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELLWEIGHTRSIDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATR, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUY, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUYWEIGHTATRNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUYWEIGHTATRDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELLWEIGHTATRNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELLWEIGHTATRDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCI, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUY, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUYWEIGHTCCINODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUYWEIGHTCCIDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELLWEIGHTCCINODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELLWEIGHTCCIDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCH, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUY, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUYWEIGHTSTOCHNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUYWEIGHTSTOCHDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELLWEIGHTSTOCHNODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELLWEIGHTSTOCHDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSI, Boolean.TRUE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUY, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUYWEIGHTSTOCHRSINODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUYWEIGHTSTOCHRSIDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELL, null);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELLWEIGHTSTOCHRSINODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELLWEIGHTSTOCHRSIDELTANODE, json);
        deflt.put(ConfigConstants.AGGREGATORSINDICATOR, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORMACD, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORRSI, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORATR, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORCCI, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORSTOCH, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORSTOCHRSI, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATOREXTRAS, "");
        deflt.put(ConfigConstants.AGGREGATORSINDICATOREXTRASDELTAS, 2);
        deflt.put(ConfigConstants.AGGREGATORSINDICATOREXTRASMACD, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATOREXTRASRSI, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATOREXTRASATR, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATOREXTRASCCI, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATOREXTRASRSI, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATOREXTRASSTOCHRSI, Boolean.FALSE);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORFUTUREDAYS, 10);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORINTERVALDAYS, 1);
        deflt.put(ConfigConstants.AGGREGATORSINDICATORTHRESHOLD, 0);
        deflt.put(ConfigConstants.AGGREGATORSMLMACD, Boolean.TRUE);
	deflt.put(ConfigConstants.AGGREGATORSMLRSI, Boolean.TRUE);
	deflt.put(ConfigConstants.AGGREGATORSMLRSIBUYRSILIMIT, 20);
	deflt.put(ConfigConstants.AGGREGATORSMLRSIBUYSRSILIMIT, 0.2);
	deflt.put(ConfigConstants.AGGREGATORSMLRSISELLRSILIMIT, 80);
	deflt.put(ConfigConstants.AGGREGATORSMLRSISELLSRSILIMIT, 0.8);
	deflt.put(ConfigConstants.AGGREGATORSMLRSIDAYSBEFORELIMIT, 25);
	deflt.put(ConfigConstants.AGGREGATORSMLRSIDAYSAFTERLIMIT, 10);
    }

    //private final static String json = "{\"_class\": \"roart.calculate.CalcMACDNode\", \"className\":\"CalcMacdNode\",\"minMutateThresholdRange\":-5.0,\"maxMutateThresholdRange\":5.0,\"threshold\":-2.476814906438654,\"useminmaxthreshold\":true,\"usethreshold\":false,\"divideminmaxthreshold\":true,\"weight\":31.0,\"changeSignWhole\":false,\"useMax\":false}";
    private final static String json = null; // "{\"_class\": \"roart.calculate.CalcMACDNode\", \"className\":\"CalcMacdNode\",\"minMutateThresholdRange\":-5.0,\"maxMutateThresholdRange\":5.0,\"threshold\":-2.476814906438654,\"useminmaxthreshold\":true,\"usethreshold\":false,\"weight\":31.0,\"useMax\":false}";

    public static Map<String, String> text = new HashMap();

    public static void makeTextMap() {
        if (!text.isEmpty()) {
            return;
        }
        text.put(ConfigConstants.DATABASEMAXHOLES, "Max number of holes/NaN to be filled");
        text.put(ConfigConstants.DATABASESPARK, "Enable Spark Database backend");
        text.put(ConfigConstants.DATABASESPARKSPARKMASTER, "Database Spark Master");
        text.put(ConfigConstants.DATABASEHIBERNATE, "Enable Hibernate Database backend");
        text.put(ConfigConstants.MACHINELEARNING, "Enable machine learning");
        text.put(ConfigConstants.MACHINELEARNINGMP, "Enable machine learning multiprocessing");
        text.put(ConfigConstants.MACHINELEARNINGMPCPU, "Machine learning multiprocessing total cpu");
        text.put(ConfigConstants.MACHINELEARNINGSPARKML, "Enable Spark ML");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMASTER, "Machine Learning Spark Master");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKNETWORKTIMEOUT, "Machine Learning Spark Network Timeout");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLMCP, "Enable Spark ML MCP");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLMCPCONFIG, "Config for Spark ML MCP");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLLR, "Enable Spark ML LR");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLLRCONFIG, "Config for Spark ML LR");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLOVR, "Enable Spark ML OVR");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLOVRCONFIG, "Config for Spark ML OVR");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOW, "Enable Tensorflow");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNN, "Enable Tensorflow DNN");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNCONFIG, "Config for Tensorflow DNN");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNL, "Enable Tensorflow DNNL");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNLCONFIG, "Config for Tensorflow DNNL");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWL, "Enable Tensorflow L");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLCONFIG, "Config for Tensorflow L");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLSTM, "Enable Tensorflow (Keras) LSTM");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLSTMCONFIG, "Config for Tensorflow (Keras) LSTM");
        text.put(ConfigConstants.MACHINELEARNINGTENSORFLOWSERVER, "Tensorflow Server");
        text.put(ConfigConstants.INDICATORS, "Enable indicators");
        text.put(ConfigConstants.INDICATORSMOVE, "Enable move indicator");
        text.put(ConfigConstants.INDICATORSMACD, "Enable MACD indicator");
        text.put(ConfigConstants.INDICATORSMACDMACDHISTOGRAMDELTA, "Enable MACD histogram delta");
        text.put(ConfigConstants.INDICATORSMACDMACDHISTOGRAMDELTADAYS, "MACD histogram delta days");

        text.put(ConfigConstants.INDICATORSMACDMACDMACDDELTA, "Enable MACD macd delta");
        text.put(ConfigConstants.INDICATORSMACDMACDMACDDELTADAYS, "MACD macd delta days");
        text.put(ConfigConstants.INDICATORSMACDMACDSIGNALDELTA, "Enable MACD signal delta");
        text.put(ConfigConstants.INDICATORSMACDMACDSIGNALDELTADAYS, "MACD signal delta days");
        text.put(ConfigConstants.INDICATORSMACDRECOMMEND, "Enable MACD buy/sell recommendation");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDBUY, "Buy");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTHISTOGRAM, "Buy weight histogram");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTHISTOGRAMDELTA, "Buy weight histogram delta");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNAL, "Buy weight macd");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNALDELTA, "Buy weight macd delta");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNAL, "Buy weight signal");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNALDELTA, "Buy weight signal delta");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDSELL, "Sell");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTHISTOGRAM, "Sell weight histogram");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTHISTOGRAMDELTA, "Sell weight histogram delta");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNAL, "Sell weight macd");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNALDELTA, "Sell weight macd delta");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNAL, "Sell weight signal");
        text.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNALDELTA, "Sell weight signal delta");
        text.put(ConfigConstants.INDICATORSMACDMACHINELEARNING, "Enable indicator MACD machine learning");
        text.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGSIGNALML, "Enable indicator MACD signal machine learning");
        text.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGMACDML, "Enable indicator MACD macd machine learning");
        text.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGHISTOGRAMML, "Enable indicator MACD histogram machine learning");
        text.put(ConfigConstants.INDICATORSMACDDAYSBEFOREZERO, "Days before zero");
        text.put(ConfigConstants.INDICATORSMACDDAYSAFTERZERO, "Days after zero");
        text.put(ConfigConstants.INDICATORSRSI, "Enable indicator RSI");
        text.put(ConfigConstants.INDICATORSRSIDELTA, "Enable indicator RSI delta");
        text.put(ConfigConstants.INDICATORSRSIDELTADAYS, "RSI delta days");
        text.put(ConfigConstants.INDICATORSRSIRECOMMEND, "Enable buy/sell indicator RSI");
        text.put(ConfigConstants.INDICATORSRSIRECOMMENDBUY, "RSI buy");
        text.put(ConfigConstants.INDICATORSRSIRECOMMENDBUYWEIGHT, "RSI buy weight");
        text.put(ConfigConstants.INDICATORSRSIRECOMMENDBUYWEIGHTDELTA, "RSI delta buy weight");
        text.put(ConfigConstants.INDICATORSRSIRECOMMENDSELL, "RSI sell");
        text.put(ConfigConstants.INDICATORSRSIRECOMMENDSELLWEIGHT, "RSI sell weight");
        text.put(ConfigConstants.INDICATORSRSIRECOMMENDSELLWEIGHTDELTA, "RSI delta sell weight");
        text.put(ConfigConstants.INDICATORSSTOCHRSI, "Enable indicator STOCH RSI");
        text.put(ConfigConstants.INDICATORSSTOCHRSIDELTA, "Enable indicator STOCH RSI delta");
        text.put(ConfigConstants.INDICATORSSTOCHRSIDELTADAYS, "STOCH RSI delta days");
        text.put(ConfigConstants.INDICATORSCCI, "Enable indicator CCI");
        text.put(ConfigConstants.INDICATORSCCIDELTA, "Enable indicator CCI delta");
        text.put(ConfigConstants.INDICATORSCCIDELTADAYS, "CCI delta days");
        text.put(ConfigConstants.INDICATORSATR, "Enable indicator ATR");
        text.put(ConfigConstants.INDICATORSATRDELTA, "Enable indicator ATR delta");
        text.put(ConfigConstants.INDICATORSATRDELTADAYS, "ATR delta days");
        text.put(ConfigConstants.INDICATORSSTOCH, "Enable indicator STOCH");
        text.put(ConfigConstants.INDICATORSSTOCHSTOCHDELTA, "Enable indicator STOCH delta");
        text.put(ConfigConstants.INDICATORSSTOCHSTOCHDELTADAYS, "STOCH delta days");
        text.put(ConfigConstants.PREDICTORS, "Enable predictors");
        text.put(ConfigConstants.PREDICTORSLSTM, "Enable LSTM predictor");
/*
        text.put(ConfigConstants.PREDICTORSLSTMEPOCHS, "LSTM epochs");
        text.put(ConfigConstants.PREDICTORSLSTMHORIZON, "LSTM horizon");
        text.put(ConfigConstants.PREDICTORSLSTMWINDOWSIZE, "LSTM windowsize");
  */
        text.put(ConfigConstants.MISC, "Misc");
        text.put(ConfigConstants.MISCPERCENTIZEPRICEINDEX, "Enable turning price/index into percent based on first date");
        text.put(ConfigConstants.MISCMLSTATS, "Enable ML stats for time usage");
        text.put(ConfigConstants.MISCOTHERSTATS, "Enable other stat pages");
        text.put(ConfigConstants.MISCMYDAYS, "Number of days to display");
        text.put(ConfigConstants.MISCMYTOPBOTTOM, "Number of items to display");
        text.put(ConfigConstants.MISCMYTBLEDAYS, "Table days");
        text.put(ConfigConstants.MISCMYTABLEMOVEINTERVALDAYS, "Interval days for table move");
        text.put(ConfigConstants.MISCMYTABLEINTERVALDAYS, "Table interval days");
        text.put(ConfigConstants.MISCMYEQUALIZE, "Enable equalizing");
        text.put(ConfigConstants.MISCMYGRAPHEQUALIZE, "Enable graph equalizing");
        text.put(ConfigConstants.MISCMYGRAPHEQUALIZEUNIFY, "Enable unified graph equalizing");
        text.put(ConfigConstants.MISCFILTERWEEKEND, "Filter out weekend data");
        text.put(ConfigConstants.MISCFILTERHOLIDAY, "Filter out holiday data");
        text.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERSIMPLEFUTUREDAYS, "Test simple recommender future days");
        text.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERSIMPLEINTERVALDAYS, "Test simple recommender interval days");
        text.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERCOMPLEXFUTUREDAYS, "Test complex recommender future days");
        text.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERCOMPLEXINTERVALDAYS, "Test complex recommender interval days");
        text.put(ConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, "ML GP config");
        text.put(ConfigConstants.EVOLVEMLEVOLUTIONCONFIG, "Indicator recommender GP config");
        /*
        text.put(ConfigConstants.TESTRECOMMENDINTERVALTIMES, "Deprecated Test recommender interval times");
        text.put(ConfigConstants.TESTRECOMMENDITERATIONS, "Deprecated Test recommender iterations");
        text.put(ConfigConstants.TESTRECOMMENDPERIOD, "Deprecated Test recommender period");
        text.put(ConfigConstants.EVOLUTION, "Evolution enable");
        text.put(ConfigConstants.EVOLUTIONGENERATIONS, "Evolution generations");
        text.put(ConfigConstants.EVOLUTIONCHILDREN, "Deprecated Evolution children");
        text.put(ConfigConstants.EVOLUTIONCROSSOVER, "Evolution crossover");
        text.put(ConfigConstants.EVOLUTIONGENERATIONCREATE, "Evolution create random in a generation");
        text.put(ConfigConstants.EVOLUTIONELITE, "Evolution elite");
        text.put(ConfigConstants.EVOLUTIONELITECLONEANDMUTATE, "Evolution elite clone and mutate");
        text.put(ConfigConstants.EVOLUTIONSELECT, "Evolution select population");
        text.put(ConfigConstants.EVOLUTIONMUTATE, "Evolution mutate");
         */
        text.put(ConfigConstants.AGGREGATORS, "Enable aggregators");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDER, "Enable aggregated recommender");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLE, "Enable aggregated recommender simple");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACD, "Enable aggregated recommender simple MACD");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUY, "Buy");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTHISTOGRAM, "Buy weight histogram");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTHISTOGRAMDELTA, "Buy weight histogram delta");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNAL, "Buy weight macd");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNALDELTA ,"Buy weight macd delta");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNAL, "Buy weight signal");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNALDELTA ,"Buy weight signal delta");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELL ,"Sell");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTHISTOGRAM ,"Sell weight histogram");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTHISTOGRAMDELTA, "Sell weight histogram delta");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNAL ,"Sell weight macd");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNALDELTA,"Sell weight macd delta");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNAL ,"Sell weight signal");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNALDELTA,"Sell weight signal delta");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSI, "Enable aggregated recommender simple RSI");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUY, "Buy");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUYWEIGHTRSI, "Buy weight RSI");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUYWEIGHTRSIDELTA, "Buy weight RSI delta");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELL, "Sell");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELLWEIGHTRSI, "Sell weight RSI");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELLWEIGHTRSIDELTA, "Sell weight RSI delta");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEX, "Enable aggregated recommender complex");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACD, "Enable aggregated recommender complex MACD");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUY, "Buy");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTHISTOGRAMNODE, "Buy weight histogram node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTHISTOGRAMDELTANODE, "Buy weight histogram delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALNODE, "Buy weight macd node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALDELTANODE ,"Buy weight macd delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALNODE, "Buy weight signal node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALDELTANODE ,"Buy weight signal delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELL, "Sell");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTHISTOGRAMNODE ,"Sell weight histogram node");              
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTHISTOGRAMDELTANODE, "Sell weight histogram delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALNODE ,"Sell weight macd node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALDELTANODE,"Sell weight macd delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALNODE ,"Sell weight signal node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALDELTANODE,"Sell weight signal delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSI, "Enable aggregated recommender complex RSI");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUY, "Buy");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUYWEIGHTRSINODE, "Buy weight RSI node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUYWEIGHTRSIDELTANODE, "Buy weight RSI delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELL, "Sell");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELLWEIGHTRSINODE, "Sell weight RSI node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELLWEIGHTRSIDELTANODE, "Sell weight RSI delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATR, "Enable aggregated recommender complex ATR");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUY, "Buy");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUYWEIGHTATRNODE, "Buy weight ATR node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRBUYWEIGHTATRDELTANODE, "Buy weight ATR delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELL, "Sell");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELLWEIGHTATRNODE, "Sell weight ATR node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXATRSELLWEIGHTATRDELTANODE, "Sell weight ATR delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCI, "Enable aggregated recommender complex CCI");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUY, "Buy");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUYWEIGHTCCINODE, "Buy weight CCI node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCIBUYWEIGHTCCIDELTANODE, "Buy weight CCI delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELL, "Sell");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELLWEIGHTCCINODE, "Sell weight CCI node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXCCISELLWEIGHTCCIDELTANODE, "Sell weight CCI delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCH, "Enable aggregated recommender complex STOCH");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUY, "Buy");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUYWEIGHTSTOCHNODE, "Buy weight STOCH node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHBUYWEIGHTSTOCHDELTANODE, "Buy weight STOCH delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELL, "Sell");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELLWEIGHTSTOCHNODE, "Sell weight STOCH node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHSELLWEIGHTSTOCHDELTANODE, "Sell weight STOCH delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSI, "Enable aggregated recommender complex STOCHRSI");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUY, "Buy");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUYWEIGHTSTOCHRSINODE, "Buy weight STOCHRSI node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSIBUYWEIGHTSTOCHRSIDELTANODE, "Buy weight STOCHRSI delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELL, "Sell");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELLWEIGHTSTOCHRSINODE, "Sell weight STOCHRSI node");
        text.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXSTOCHRSISELLWEIGHTSTOCHRSIDELTANODE, "Sell weight STOCHRSI delta node");
        text.put(ConfigConstants.AGGREGATORSINDICATOR, "ML indicator enable");
        text.put(ConfigConstants.AGGREGATORSINDICATORMACD, "ML indicator MACD enable");
        text.put(ConfigConstants.AGGREGATORSINDICATORRSI, "ML indicator RSI enable");
        text.put(ConfigConstants.AGGREGATORSINDICATORATR, "ML indicator ATR enable");
        text.put(ConfigConstants.AGGREGATORSINDICATORCCI, "ML indicator CCI enable");
        text.put(ConfigConstants.AGGREGATORSINDICATORSTOCH, "ML indicator STOCH enable");
        text.put(ConfigConstants.AGGREGATORSINDICATORSTOCHRSI, "ML indicator STOCHRSI enable");
        text.put(ConfigConstants.AGGREGATORSINDICATOREXTRAS, "ML indicator extras");
        text.put(ConfigConstants.AGGREGATORSINDICATOREXTRASDELTAS, "ML indicator extras delta days");
        text.put(ConfigConstants.AGGREGATORSINDICATOREXTRASMACD, "ML indicator extras use MACD result");
        text.put(ConfigConstants.AGGREGATORSINDICATOREXTRASRSI, "ML indicator extras use RSI result");
        text.put(ConfigConstants.AGGREGATORSINDICATOREXTRASATR, "ML indicator extras use ATR result");
        text.put(ConfigConstants.AGGREGATORSINDICATOREXTRASCCI, "ML indicator extras use CCI result");
        text.put(ConfigConstants.AGGREGATORSINDICATOREXTRASSTOCH, "ML indicator extras use RSI result");
        text.put(ConfigConstants.AGGREGATORSINDICATOREXTRASSTOCHRSI, "ML indicator extras use STOCHRSI result");
        text.put(ConfigConstants.AGGREGATORSINDICATORFUTUREDAYS, "ML indicator days in the future for threshold");
        text.put(ConfigConstants.AGGREGATORSINDICATORINTERVALDAYS, "ML indicator days in the future interval");
        text.put(ConfigConstants.AGGREGATORSINDICATORTHRESHOLD, "ML indicator threshold for classifier");
        text.put(ConfigConstants.AGGREGATORSMLMACD, "MLMACD aggregator enable");
        text.put(ConfigConstants.AGGREGATORSMLMACDMLCONFIG, "MLMACD aggregator ML config");
	text.put(ConfigConstants.AGGREGATORSMLRSI, "MLRSI aggregator enable");
	text.put(ConfigConstants.AGGREGATORSMLRSIMLCONFIG, "RSI aggregator ML config");
	text.put(ConfigConstants.AGGREGATORSMLRSIBUY, "RSI aggregator buy");
	text.put(ConfigConstants.AGGREGATORSMLRSIBUYRSILIMIT, "RSI aggregator buy RSI limit");
	text.put(ConfigConstants.AGGREGATORSMLRSIBUYSRSILIMIT, "RSI aggregator buy STOCHRSI limit");
	text.put(ConfigConstants.AGGREGATORSMLRSISELL, "RSI aggregator sell");
	text.put(ConfigConstants.AGGREGATORSMLRSISELLRSILIMIT, "RSI aggregator sell RSI limit");
	text.put(ConfigConstants.AGGREGATORSMLRSISELLSRSILIMIT, "RSI aggregator sell STOCHRSILIMIT");
	text.put(ConfigConstants.AGGREGATORSMLRSIDAYSBEFORELIMIT, "Days before limit");
	text.put(ConfigConstants.AGGREGATORSMLRSIDAYSAFTERLIMIT, "Days after limit");

    }

    public static Map<String, Double[]> range = new HashMap();

    public static void makeRangeMap() {
        if (!range.isEmpty()) {
            return;
        }
        range.put(ConfigConstants.INDICATORSMACDDAYSBEFOREZERO, new Double[] { 1.0, 50.0 } );
        range.put(ConfigConstants.INDICATORSMACDDAYSAFTERZERO, new Double[] { 1.0, 20.0 } );
        range.put(ConfigConstants.AGGREGATORSINDICATOREXTRASDELTAS, new Double[] { 2.0, 5.0 } );
        range.put(ConfigConstants.AGGREGATORSINDICATORINTERVALDAYS, new Double[] { 2.0, 25.0 } );
        range.put(ConfigConstants.AGGREGATORSINDICATORFUTUREDAYS, new Double[] { 2.0, 15.0 } );
        range.put(ConfigConstants.AGGREGATORSINDICATORTHRESHOLD, new Double[] { 0.0, 1.0 } );
	range.put(ConfigConstants.AGGREGATORSMLRSIBUYRSILIMIT, new Double[] { 0.0, 100.0 } );
	range.put(ConfigConstants.AGGREGATORSMLRSIBUYSRSILIMIT, new Double[] { 0.0, 1.0 } );
	range.put(ConfigConstants.AGGREGATORSMLRSISELLRSILIMIT, new Double[] { 0.0, 100.0 } );
	range.put(ConfigConstants.AGGREGATORSMLRSISELLSRSILIMIT, new Double[] { 0.0, 1.0 } );
	range.put(ConfigConstants.AGGREGATORSMLRSIDAYSBEFORELIMIT, new Double[] { 1.0, 50.0 } );
	range.put(ConfigConstants.AGGREGATORSMLRSIDAYSAFTERLIMIT, new Double[] { 1.0, 20.0 } );

/*
        range.put(ConfigConstants.PREDICTORSLSTMEPOCHS, new Double[] { 1.0, 10.0 } );
        range.put(ConfigConstants.PREDICTORSLSTMHORIZON, new Double[] { 1.0, 10.0 } );
        range.put(ConfigConstants.PREDICTORSLSTMWINDOWSIZE, new Double[] { 2.0, 10.0 } );
        */
    }
    
    public static Map<String, XMLType> mymap = new HashMap<>();
    public static void makeMap() {
        mymap.put(ConfigConstants.PROPFILE, new XMLType(null, null, null));
        mymap.put(ConfigConstants.CONFIGFILE, new XMLType(null, null, null));
        mymap.put(ConfigConstants.SPARK, new XMLType(null, null, null));
        mymap.put(ConfigConstants.HIBERNATE, new XMLType(null, null, null));
        mymap.put(ConfigConstants.SPARKMASTER, new XMLType(null, null, null));
        mymap.put(ConfigConstants.TENSORFLOW, new XMLType(null, null, null));
        mymap.put(ConfigConstants.DATABASEMAXHOLES, new XMLType( Integer.class, 5, "Max number of holes/NaN to be filled"));
        mymap.put(ConfigConstants.DATABASESPARK, new XMLType( Boolean.class, Boolean.TRUE, "Enable Spark Database backend"));
        mymap.put(ConfigConstants.DATABASESPARKSPARKMASTER, new XMLType( String.class, "spark://127.0.0.1:7077", "Database Spark Master"));
        mymap.put(ConfigConstants.DATABASEHIBERNATE, new XMLType( Boolean.class, Boolean.TRUE, "Enable Hibernate Database backend"));
        mymap.put(ConfigConstants.MACHINELEARNING, new XMLType( Boolean.class, Boolean.TRUE, "Enable machine learning"));
        mymap.put(ConfigConstants.MACHINELEARNINGMP, new XMLType( Boolean.class, Boolean.FALSE, "Enable machine learning multiprocessing"));
        mymap.put(ConfigConstants.MACHINELEARNINGMPCPU, new XMLType( Double.class, 0.5, "Machine learning multiprocessing total cpu"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKML, new XMLType( Boolean.class, Boolean.TRUE, "Enable Spark ML"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMASTER, new XMLType( String.class, "spark://127.0.0.1:7077", "Machine Learning Spark Master"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKNETWORKTIMEOUT, new XMLType( Integer.class, null, "Machine Learning Spark Network Timeout"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKMLMCP, new XMLType( Boolean.class, Boolean.TRUE, "Enable Spark ML MCP"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKMLMCPCONFIG, new XMLType( String.class, CONFIG_MCP, "Config for Spark ML MCP"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKMLLR, new XMLType( Boolean.class, Boolean.TRUE, "Enable Spark ML LR"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKMLLRCONFIG, new XMLType( String.class, CONFIG_LR, "Config for Spark ML LR"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKMLOVR, new XMLType( Boolean.class, Boolean.TRUE, "Enable Spark ML OVR"));
        mymap.put(ConfigConstants.MACHINELEARNINGSPARKMLOVRCONFIG, new XMLType( String.class, CONFIG_OVR, "Config for Spark ML OVR"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOW, new XMLType( Boolean.class, Boolean.TRUE, "Enable Tensorflow"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNN, new XMLType( Boolean.class, Boolean.TRUE, "Enable Tensorflow DNN"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNCONFIG, new XMLType( String.class, CONFIG_DNN, "Config for Tensorflow DNN"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNL, new XMLType( Boolean.class, Boolean.FALSE, "Enable Tensorflow DNNL"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWDNNLCONFIG, new XMLType( String.class, CONFIG_DNNL, "Config for Tensorflow DNNL"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWL, new XMLType( Boolean.class, Boolean.TRUE, "Enable Tensorflow L"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLCONFIG, new XMLType( String.class, CONFIG_L, "Config for Tensorflow L"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLSTM, new XMLType( Boolean.class, Boolean.TRUE, "Enable Tensorflow (Keras) LSTM"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWLSTMCONFIG, new XMLType( String.class, CONFIG_LSTM, "Config for Tensorflow (Keras) LSTM"));
        mymap.put(ConfigConstants.MACHINELEARNINGTENSORFLOWSERVER, new XMLType( String.class, "http://localhost:8000", "Tensorflow Server"));
        mymap.put(ConfigConstants.INDICATORS, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicators"));
        mymap.put(ConfigConstants.INDICATORSMOVE, new XMLType( Boolean.class, Boolean.TRUE, "Enable move indicator"));
        mymap.put(ConfigConstants.INDICATORSMACD, new XMLType( Boolean.class, Boolean.TRUE, "Enable MACD indicator"));
        mymap.put(ConfigConstants.INDICATORSMACDMACDHISTOGRAMDELTA, new XMLType( Boolean.class, Boolean.TRUE, "Enable MACD histogram delta"));
        mymap.put(ConfigConstants.INDICATORSMACDMACDHISTOGRAMDELTADAYS, new XMLType( Integer.class, 3, "MACD histogram delta days"));
        mymap.put(ConfigConstants.INDICATORSMACDMACDMACDDELTA, new XMLType( Boolean.class, Boolean.TRUE, "Enable MACD macd delta"));
        mymap.put(ConfigConstants.INDICATORSMACDMACDMACDDELTADAYS, new XMLType( Integer.class, 3, "MACD macd delta days"));
        mymap.put(ConfigConstants.INDICATORSMACDMACDSIGNALDELTA, new XMLType( Boolean.class, Boolean.TRUE, "Enable MACD signal delta"));
        mymap.put(ConfigConstants.INDICATORSMACDMACDSIGNALDELTADAYS, new XMLType( Integer.class, 3, "MACD signal delta days"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMEND, new XMLType( Boolean.class, Boolean.TRUE, "Enable MACD buy/sell recommendation"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDBUY, new XMLType( String.class, null, "Buy"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTHISTOGRAM, new XMLType( Integer.class, 40, "Buy weight histogram"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTHISTOGRAMDELTA, new XMLType( Integer.class, 20, "Buy weight histogram delta"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNAL, new XMLType( Integer.class, 20, "Buy weight macd"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNALDELTA, new XMLType( Integer.class, 20, "Buy weight macd delta"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNAL, new XMLType( Integer.class, 20, "Buy weight signal"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDBUYWEIGHTSIGNALDELTA, new XMLType( Integer.class, 20, "Buy weight signal delta"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDSELL, new XMLType( String.class, null, "Sell"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTHISTOGRAM, new XMLType( Integer.class, 40, "Sell weight histogram"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTHISTOGRAMDELTA, new XMLType( Integer.class, 20, "Sell weight histogram delta"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNAL, new XMLType( Integer.class, 20, "Sell weight macd"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNALDELTA, new XMLType( Integer.class, 20, "Sell weight macd delta"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNAL, new XMLType( Integer.class, 20, "Sell weight signal"));
        mymap.put(ConfigConstants.INDICATORSMACDRECOMMENDSELLWEIGHTSIGNALDELTA, new XMLType( Integer.class, 20, "Sell weight signal delta"));
        mymap.put(ConfigConstants.INDICATORSMACDMACHINELEARNING, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator MACD machine learning"));
        mymap.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGSIGNALML, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator MACD signal machine learning"));
        mymap.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGMACDML, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator MACD macd machine learning"));
        mymap.put(ConfigConstants.INDICATORSMACDMACHINELEARNINGHISTOGRAMML, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator MACD histogram machine learning"));
        mymap.put(ConfigConstants.INDICATORSMACDDAYSBEFOREZERO, new XMLType( Integer.class, 25, "Days before zero", new Double[] { 1.0, 50.0 } ));
        mymap.put(ConfigConstants.INDICATORSMACDDAYSAFTERZERO, new XMLType( Integer.class, 10, "Days after zero", new Double[] { 1.0, 20.0 } ));
        mymap.put(ConfigConstants.INDICATORSRSI, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator RSI"));
        mymap.put(ConfigConstants.INDICATORSRSIDELTA, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator RSI delta"));
        mymap.put(ConfigConstants.INDICATORSRSIDELTADAYS, new XMLType( Integer.class, 3, "RSI delta days"));
        mymap.put(ConfigConstants.INDICATORSSTOCHRSI, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator STOCH RSI"));
        mymap.put(ConfigConstants.INDICATORSSTOCHRSIDELTA, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator STOCH RSI delta"));
        mymap.put(ConfigConstants.INDICATORSSTOCHRSIDELTADAYS, new XMLType( Integer.class, 3, "STOCH RSI delta days"));
        mymap.put(ConfigConstants.INDICATORSRSIRECOMMEND, new XMLType( Boolean.class, Boolean.TRUE, "Enable buy/sell indicator RSI"));
        mymap.put(ConfigConstants.INDICATORSRSIRECOMMENDBUY, new XMLType( String.class, null, "RSI buy"));
        mymap.put(ConfigConstants.INDICATORSRSIRECOMMENDBUYWEIGHT, new XMLType( Integer.class, 50, "RSI buy weight"));
        mymap.put(ConfigConstants.INDICATORSRSIRECOMMENDBUYWEIGHTDELTA, new XMLType( Integer.class, 50, "RSI delta buy weight"));
        mymap.put(ConfigConstants.INDICATORSRSIRECOMMENDSELL, new XMLType( String.class, null, "RSI sell"));
        mymap.put(ConfigConstants.INDICATORSRSIRECOMMENDSELLWEIGHT, new XMLType( Integer.class, 50, "RSI sell weight"));
        mymap.put(ConfigConstants.INDICATORSRSIRECOMMENDSELLWEIGHTDELTA, new XMLType( Integer.class, 50, "RSI delta sell weight"));
        mymap.put(ConfigConstants.INDICATORSCCI, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator CCI"));
        mymap.put(ConfigConstants.INDICATORSCCIDELTA, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator CCI delta"));
        mymap.put(ConfigConstants.INDICATORSCCIDELTADAYS, new XMLType( Integer.class, 3, "CCI delta days"));
        mymap.put(ConfigConstants.INDICATORSATR, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator ATR"));
        mymap.put(ConfigConstants.INDICATORSATRDELTA, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator ATR delta"));
        mymap.put(ConfigConstants.INDICATORSATRDELTADAYS, new XMLType( Integer.class, 3, "ATR delta days"));
        mymap.put(ConfigConstants.INDICATORSSTOCH, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator STOCH"));
        mymap.put(ConfigConstants.INDICATORSSTOCHSTOCHDELTA, new XMLType( Boolean.class, Boolean.TRUE, "Enable indicator STOCH delta"));
        mymap.put(ConfigConstants.INDICATORSSTOCHSTOCHDELTADAYS, new XMLType( Integer.class, 3, "STOCH delta days"));
        mymap.put(ConfigConstants.PREDICTORS, new XMLType( Boolean.class, Boolean.TRUE, "Enable predictors"));
        mymap.put(ConfigConstants.PREDICTORSLSTM, new XMLType( Boolean.class, Boolean.TRUE, "Enable LSTM predictor"));
/*
        mymap.put(ConfigConstants.PREDICTORSLSTMWINDOWSIZE, new XMLType( Integer.class, 3, "LSTM windowsize"));
        mymap.put(ConfigConstants.PREDICTORSLSTMHORIZON, new XMLType( Integer.class, 5, "LSTM horizon"));
        mymap.put(ConfigConstants.PREDICTORSLSTMEPOCHS, new XMLType( Integer.class, 5, "LSTM epochs"));
*/
        mymap.put(ConfigConstants.MISC, new XMLType( Boolean.class, Boolean.TRUE, "Misc"));
        mymap.put(ConfigConstants.MISCPERCENTIZEPRICEINDEX, new XMLType( Boolean.class, Boolean.TRUE, "Enable turning price/index into percent based on first date"));
        mymap.put(ConfigConstants.MISCMLSTATS, new XMLType( Boolean.class, Boolean.TRUE, "Enable ML stats for time usage"));
        mymap.put(ConfigConstants.MISCOTHERSTATS, new XMLType( Boolean.class, Boolean.TRUE, "Enable other stat pages"));
        mymap.put(ConfigConstants.MISCMYDAYS, new XMLType( Integer.class, 180, "Number of days to display"));
        mymap.put(ConfigConstants.MISCMYTOPBOTTOM, new XMLType( Integer.class, 10, "Number of items to display"));
        mymap.put(ConfigConstants.MISCMYTBLEDAYS, new XMLType( Integer.class, 180, "Table days"));
        mymap.put(ConfigConstants.MISCMYTABLEMOVEINTERVALDAYS, new XMLType( Integer.class, 5, "Interval days for table move"));
        mymap.put(ConfigConstants.MISCMYTABLEINTERVALDAYS, new XMLType( Integer.class, 1, "Table interval days"));
        mymap.put(ConfigConstants.MISCMYEQUALIZE, new XMLType( Boolean.class, Boolean.TRUE, "Enable equalizing"));
        mymap.put(ConfigConstants.MISCMYGRAPHEQUALIZE, new XMLType( Boolean.class, Boolean.TRUE, "Enable graph equalizing"));
        mymap.put(ConfigConstants.MISCMYGRAPHEQUALIZEUNIFY, new XMLType( Boolean.class, Boolean.TRUE, "Enable unified graph equalizing"));
        mymap.put(ConfigConstants.MISCFILTERWEEKEND, new XMLType( Boolean.class, Boolean.TRUE, "Filter out weekend data"));
        mymap.put(ConfigConstants.MISCFILTERHOLIDAY, new XMLType( Boolean.class, Boolean.TRUE, "Filter out holiday data"));
        mymap.put(ConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, new XMLType( String.class, "{ \"generations\" : 100, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 16, \"mutate\" : 2, \"generationcreate\" : 1 }", "ML GP config"));
        mymap.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERCOMPLEXFUTUREDAYS, new XMLType( Integer.class, 10, "Test complex recommender future days"));
        mymap.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERCOMPLEXINTERVALDAYS, new XMLType( Integer.class, 5, "Test complex recommender interval days"));
        mymap.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERSIMPLEFUTUREDAYS, new XMLType( Integer.class, 10, "Test simple recommender future days"));
        mymap.put(ConfigConstants.EVOLVEINDICATORRECOMMENDERSIMPLEINTERVALDAYS, new XMLType( Integer.class, 5, "Test simple recommender interval days"));
        mymap.put(ConfigConstants.EVOLVEMLEVOLUTIONCONFIG, new XMLType( String.class, "{ \"generations\" : 10, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 4, \"mutate\" : 2, \"generationcreate\" : 1 }", "Indicator recommender GP config"));
        mymap.put(ConfigConstants.AGGREGATORS, new XMLType( Boolean.class, Boolean.TRUE, "Enable aggregators"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDER, new XMLType( Boolean.class, Boolean.TRUE, "Enable aggregated recommender"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLE, new XMLType( Boolean.class, Boolean.TRUE, "Enable aggregated recommender simple"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACD, new XMLType( Boolean.class, Boolean.TRUE, "Enable aggregated recommender simple MACD"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUY, new XMLType( String.class, null, "Buy"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTHISTOGRAM, new XMLType( Integer.class, 40, "Buy weight histogram"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTHISTOGRAMDELTA, new XMLType( Integer.class, 20, "Buy weight histogram delta"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNAL, new XMLType( Integer.class, 20, "Buy weight macd"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNALDELTA, new XMLType( Integer.class, 20, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNAL, new XMLType( Integer.class, 20, "Buy weight signal"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDBUYWEIGHTSIGNALDELTA, new XMLType( Integer.class, 20, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELL, new XMLType( String.class, null, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTHISTOGRAM, new XMLType( Integer.class, 40, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTHISTOGRAMDELTA, new XMLType( Integer.class, 20, "Sell weight histogram delta"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNAL, new XMLType( Integer.class, 20, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNALDELTA, new XMLType( Integer.class, 20, "Sell weight macd delta"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNAL, new XMLType( Integer.class, 20, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLEMACDSELLWEIGHTSIGNALDELTA, new XMLType( Integer.class, 20, "Sell weight signal delta"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSI, new XMLType( Boolean.class, Boolean.TRUE, "Enable aggregated recommender simple RSI"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUY, new XMLType( String.class, null, "Buy"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUYWEIGHTRSI, new XMLType( Integer.class, 20, "Buy weight RSI"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSIBUYWEIGHTRSIDELTA, new XMLType( Integer.class, 20, "Buy weight RSI delta"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELL, new XMLType( String.class, null, "Sell"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELLWEIGHTRSI, new XMLType( Integer.class, 20, "Sell weight RSI"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERSIMPLERSISELLWEIGHTRSIDELTA, new XMLType( Integer.class, 20, "Sell weight RSI delta"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEX, new XMLType( Boolean.class, Boolean.TRUE, "Enable aggregated recommender complex"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACD, new XMLType( Boolean.class, Boolean.TRUE, "Enable aggregated recommender complex MACD"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUY, new XMLType( String.class, null, "Buy"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTHISTOGRAMNODE, new XMLType( String.class, json, "Buy weight histogram node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTHISTOGRAMDELTANODE, new XMLType( String.class, json, "Buy weight histogram delta node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALNODE, new XMLType( String.class, json, "Buy weight macd node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALDELTANODE, new XMLType( String.class, json, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALNODE, new XMLType( String.class, json, "Buy weight signal node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDBUYWEIGHTSIGNALDELTANODE, new XMLType( String.class, json, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELL, new XMLType( String.class, null, "Sell"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTHISTOGRAMNODE, new XMLType( String.class, json, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTHISTOGRAMDELTANODE, new XMLType( String.class, json, "Sell weight histogram delta node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALNODE, new XMLType( String.class, json, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALDELTANODE, new XMLType( String.class, json, "Sell weight macd delta node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALNODE, new XMLType( String.class, json, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXMACDSELLWEIGHTSIGNALDELTANODE, new XMLType( String.class, json, "Sell weight signal delta node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSI, new XMLType( Boolean.class, Boolean.TRUE, "Enable aggregated recommender complex RSI"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUY, new XMLType( String.class, null, "Buy"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUYWEIGHTRSINODE, new XMLType( String.class, json, "Buy weight RSI node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSIBUYWEIGHTRSIDELTANODE, new XMLType( String.class, json, "Buy weight RSI delta node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELL, new XMLType( String.class, null, "Sell"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELLWEIGHTRSINODE, new XMLType( String.class, json, "Sell weight RSI node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRECOMMENDERCOMPLEXRSISELLWEIGHTRSIDELTANODE, new XMLType( String.class, json, "Sell weight RSI delta node"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOR, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator enable"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORMLCONFIG, new XMLType(null, null, null));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORMACD, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator MACD enable"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORRSI, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator RSI enable"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORATR, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator ATR enable"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORCCI, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator CCI enable"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORSTOCH, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator STOCH enable"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORSTOCHRSI, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator STOCHRSI enable"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOREXTRAS, new XMLType( String.class, "", "ML indicator extras"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOREXTRASDELTAS, new XMLType( Integer.class, 2, "ML indicator extras delta days"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOREXTRASMACD, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator extras use MACD result"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOREXTRASRSI, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator extras use RSI result"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOREXTRASATR, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator extras use ATR result"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOREXTRASCCI, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator extras use CCI result"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOREXTRASSTOCH, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator extras use STOCH result"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATOREXTRASSTOCHRSI, new XMLType( Boolean.class, Boolean.FALSE, "ML indicator extras use STOCHRSI result"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORFUTUREDAYS, new XMLType( Integer.class, 10, "ML indicator days in the future for threshold"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORINTERVALDAYS, new XMLType( Integer.class, 1, "ML indicator days in the future interval"));
        mymap.put(ConfigConstants.AGGREGATORSINDICATORTHRESHOLD, new XMLType( Double.class, 0, "ML indicator threshold for classifier"));
        mymap.put(ConfigConstants.AGGREGATORSMLMACD, new XMLType( Boolean.class, Boolean.TRUE, "MLMACD aggreagator enable"));
        mymap.put(ConfigConstants.AGGREGATORSMLMACDMLCONFIG, new XMLType(null, null, null));
	mymap.put(ConfigConstants.AGGREGATORSMLRSI, new XMLType( Boolean.class, Boolean.TRUE, "MLRSI aggregator enable"));
	mymap.put(ConfigConstants.AGGREGATORSMLRSIMLCONFIG, new XMLType( String.class, null, "RSI aggregator ML config"));
	mymap.put(ConfigConstants.AGGREGATORSMLRSIBUY, new XMLType( Object.class, null, "RSI aggregator buy"));
	mymap.put(ConfigConstants.AGGREGATORSMLRSIBUYRSILIMIT, new XMLType( Integer.class, 20, "RSI aggregator buy RSI limit", new Double[] { 0.0, 100.0 }));
	mymap.put(ConfigConstants.AGGREGATORSMLRSIBUYSRSILIMIT, new XMLType( Double.class, 0.2, "RSI aggregator buy STOCHRSI limit", new Double[] { 0.0, 1.0 }));
	mymap.put(ConfigConstants.AGGREGATORSMLRSISELL, new XMLType( Object.class, null, "RSI aggregator sell"));
	mymap.put(ConfigConstants.AGGREGATORSMLRSISELLRSILIMIT, new XMLType( Integer.class, 80, "RSI aggregator sell RSI limit", new Double[] { 0.0, 100.0 }));
	mymap.put(ConfigConstants.AGGREGATORSMLRSISELLSRSILIMIT, new XMLType( Double.class, 0.8, "RSI aggregator sell STOCHRSILIMIT", new Double[] { 0.0, 1.0 }));
	mymap.put(ConfigConstants.AGGREGATORSMLRSIDAYSBEFORELIMIT, new XMLType( Integer.class, 25, "Days before limit", new Double[] { 1.0, 50.0 }));
	mymap.put(ConfigConstants.AGGREGATORSMLRSIDAYSAFTERLIMIT, new XMLType( Integer.class, 10, "Days after limit", new Double[] { 1.0, 20.0 }));
    }

}
