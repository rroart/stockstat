def label = "mypod-${UUID.randomUUID().toString()}"    // ugly necessary workaround
podTemplate(label: label, containers: [
  containerTemplate(name: 'docker', image: 'docker:dind', ttyEnabled: true, privileged: true,
    command: 'dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay')
  ],
  volumes: [emptyDirVolume(memory: false, mountPath: '/var/lib/docker')]) {
  node(label) {
    container('docker') {
      checkout scm
      def dockerHome = tool 'Docker latest'
      env.PATH = "${dockerHome}/bin:${env.PATH}"
      def buildImage = docker.build("buildimage", "-f docker/jenkins/Dockerfile.build docker/jenkins") 
      buildImage.inside {
        sh 'mvn verify -pl !web'
        if (env.MYBRANCH == 'develop') {
          env.OTHERBRANCH = 'master'
        } else {
          env.OTHERBRANCH = 'develop'
        }
        sh 'git checkout $OTHERBRANCH'
        sh 'git merge origin/$MYBRANCH'
        sh 'mvn verify -pl !web'
        env.MYPUSH = sh(script: 'git config remote.origin.url | cut -c9-', returnStdout: true)
        withCredentials([usernameColonPassword(credentialsId: 'githubtoken', variable: 'TOKEN')]) {
          sh 'git push https://$TOKEN@$MYPUSH'
        }
        if (env.MYBRANCH != 'develop') {
          build(job: 'stockstatdev', wait: false, propagate: false)
        } else {
          build(job: 'stockstatsonarscanner', wait: false, propagate: false)
	}
      }        
    }
  }
}
