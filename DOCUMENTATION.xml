<?xml version='1.0' encoding="utf-8"?>
<!--!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V5.0//EN" "http://www.docbook.org/xml/5.0/dtd/docbook.dtd"-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
<title>
Stock statistics
</title>
  <bookinfo>
    <author>
      <firstname>Roar</firstname>
<surname>Thron√¶s</surname>
</author>
    <abstract>
      <para>
	Stock statistics is an app for making simple stats and graphs.
      </para>
    </abstract>
  </bookinfo>
<chapter>
  <title>
    Introduction
  </title>
<para>
For making simple stats and graphs.
</para>
</chapter>
<chapter>
  <title>
    Installing
  </title>
<para>
Get git from <ulink url="https://github.com/rroart/stockstat">here</ulink>.
</para>
<para>
  <itemizedlist>
    <title>
      Required software
    </title>
    <listitem>
      <para>
	Maven
      </para>
    </listitem>
    <listitem>
      <para>
	Java 8
      </para>
    </listitem>
    <listitem>
      <para>
	PostgreSQL
      </para>
    </listitem>
    <listitem>
      <para>
	R
      </para>
    </listitem>
  </itemizedlist>
</para>
<para>
  The software is built with maven. Use mvn package, and then mvn install to install the common library components. Use mvn jetty:run to run the app.
</para>
<para>
Database:
Need to provide postgres with a database stockstat, and username/password stockstat/password. Use the following:
<programlisting>
  su - root
  su - postgres
  psql
  create database stockstat;
  create user stockstat with password 'password';
  grant all privileges on database stockstat to stockstat;
</programlisting>
</para>
</chapter>
<chapter>
  <title>
    Configuration
  </title>
  <para>
    Sample files are not yet available.
  </para>
  <para>
    Configure with stockstat.xml:
    See sample file stockstat.xml, it contains the complete configuration structure.
  </para>
  <sect1>
    <title>
      Non-mandatory
    </title>
    <sect2>
      <title>
	Spark
      </title>
      <para>
	Not yet in active use
	<programlisting>
	  database.spark[@enable]=true
	  database.spark.sparkmaster=...
	</programlisting>
    </para>
</sect2>
  </sect1>
</chapter>
<chapter>
  <title>
    Data acquisition
  </title>
<para>
There are two phases, data acquisition and usage.
</para>
<para>
  The input format dtd is
  <itemizedlist>
    <title>
      DTD
    </title>
    <listitem>
      <para>
      market: meta? rows
      </para>
    </listitem>
    <listitem>
      <para>
      meta: marketid period1 period2 period3 period4 period5 period6
      </para>
    </listitem>
    <listitem>
      <para>
      rows: row*
      </para>
    </listitem>
    <listitem>
      <para>
      row: id marketid name date indexvalue price currency period1 period2 period3 period4 period5 period6
      </para>
    </listitem>
  </itemizedlist>
  This have so far been used for gathering info from web on a daily basis. It may also be used for entering historic data. Typically, web pages (choose a name based on this) for markets contain rows with stocks, commodities etc, and the price, currency, index and increased value for given periods. The given periods are named in the meta to indicate the time period, be it one day, one week, one month. The included xslts show how to transform from the web to this xml format.
  Then run
  <programlisting>
    java -jar target/stockstat-input-0.5-SNAPSHOT-jar-with-dependencies.jar my.xml
  </programlisting>
  with a param file of that format, here my.xml.
  This may be run from cron, or once if importing historical data.
  If importing historical data, the period values must be computed in the xml file to be input.
  </para>
</chapter>
<chapter id="webapp">
  <title>
    Webapp
  </title>
  <para>
    The webapp is pretty basic. You can choose a market under get market, then set the wanted date, reset the date (then it will choose the most recent day), or reload (in case date reset, or new data loaded). If getting stats, all elements in the markets will be statistically compared. There are a number of parameter settings.
    The control panel have options for choosing whether to show plain movements, MACD or RSI.
    <itemizedlist>
      <title>
	Parameters
      </title>
      <listitem>
	<para>
	  Single interval days (R tableintervaldays): for the resulting list, a base for the delta of moving up compared to the previous time.
	</para>
      </listitem>
      <listitem>
	<para>
	  Table move interval days (R tablemoveintervaldays): for the resulting list, a base for the delta of moving up compared to the previous time.
	</para>
      </listitem>
      <listitem>
	<para>
Table days (R days): how many days to use for the graph or statistics
	</para>
      </listitem>
      <listitem>
	<para>
	  Table interval days (R tableintervaldays): interval between days for above
	</para>
      </listitem>
      <listitem>
	<para>
	  Table top/bottom (R topbottom): number to show in top/bottom chart
	</para>
	</listitem>
    </itemizedlist>
  </para>
  <para>
    Then, below, there is a possibility of choosing elements from different markets, and the displaying them, as best as is possible. When choosing a market, it is possible to choose an item from that market, and add to a list that is to be displayed by clicking choose graph. There is a choice for equalizing the graphich table for price and index in an additional table, setting each max value to 100%. This is to ensure a more meaningful comparison, since the meanings/scales for each dataset may be different. The merge choice is not yet in use.
  </para>
</chapter>
<chapter>
  <title>
    External software configuration
  </title>
  <sect1 id="spark">
    <title id="sparkterm">
      Spark
    </title>
    <para>
      Not yet in use
    </para>
    <para>
      My current has no configuration. The only configuration lies in my current startup scripts, which goes:
      <programlisting>
	SPARK_MASTER_IP=127.0.0.1  ./sbin/start-master.sh --webui-port 8088 &amp;
	./sbin/start-slave.sh  -c 1 -m 1G spark://127.0.0.1:7077 &amp;
      </programlisting>
    </para>
  </sect1>
</chapter>  
<chapter id="R">
  <title>
    R
  </title>
  <para>
    Usage is by sourcing the r/lib.r.
    <programlisting>
      source r/libr.r
    </programlisting>
    This is defining variables, functions and reading in all of the database.
    After this is done, the following functions may be used (with =? parameters as optional with default):
    <itemizedlist>
      <title>
	Functions
      </title>
      <listitem>
	<para>
    devoffs() : closing all windows.
      </para>
    </listitem>
    <listitem>
      <para>
    getcontentgraph(mydate, days, tableintervaldays, ids, periodtext) : show a graph for given ids    
      </para>
    </listitem>
    <listitem>
      <para>
	out
    getrisinggraph(market, mydate, days, tableintervaldays, topbottom, myperiodtexts) : show a graph over best risers (outdated)
      </para>
    </listitem>
    <listitem>
      <para>
    getbottomgraph(market, mydate, days, tablemoveintervaldays, topbottom, myperiodtexts, sort=?, macddays=?, wantrise=?, wantmacd=?, wantrsi=?) : show the bottom for period
      </para>
    </listitem>
    <listitem>
      <para>
    gettopgraph(market, mydate, days, tablemoveintervaldays, topbottom, myperiodtexts, sort=?, macddays=?, reverse=?, wantrise=?, wantmacd=?, wantrsi=?) : show the top for period
      </para>
    </listitem>
    </itemizedlist>
    The parameters used for this are:
    <table>
      <title>
	Parameters
      </title>
      <tgroup cols="2">
	<colspec colnum="1" colname="col1" colwidth="1*"/>
	<colspec colnum="2" colname="col2" colwidth="1*"/>
	<thead>
	  <row>
	    <entry>
	      Parameter
	    </entry>
	    <entry>
	      Description
	    </entry>
	  </row>
	</thead>
	<tbody>
      <row>
	<entry>
	  market
	</entry>
	<entry>the chosen market
      </entry>
    </row>
    <row>
      <entry>
    mydate	</entry>
	<entry>the recent date, alternative NULL for getting the most recent, or a number for the previous days.
      </entry>
    </row>
    <row>
      <entry>
    days	</entry>
	<entry>the number of days to display
      </entry>
    </row>
    <row>
      <entry>
    tableintervaldays	</entry>
	<entry>the interval between the days for the graph (1 is recommended)
      </entry>
    </row>
    <row>
      <entry>
    tablemoveintervaldays	</entry>
	<entry>the interval between the days
      </entry>
    </row>
    <row>
      <entry>
    topbottom	</entry>
	<entry>number to show
      </entry>
    </row>
    <row>
      <entry>
    myperiodtexts/periodtext	</entry>
	<entry>a list or single periods to display
      </entry>
    </row>
    <row>
      <entry>
    ids	</entry>
	<entry>specific ids to display
      </entry>
    </row>
    <row>
      <entry>
	wantrise
    </entry>
    <entry>
      boolean for whether to display rise in tablemoveintervaldays between days
      </entry>
    </row>
    <row>
      <entry>
	reverse
    </entry>
    <entry>
      boolean for whether to show reversed order, default FALSE
      </entry>
    </row>
    <row>
      <entry>
	wantmacd
    </entry>
    <entry>
      boolean for whether to display the MACD momementum, default FALSE
      </entry>
    </row>
    <row>
      <entry>
	wantrsi
    </entry>
    <entry>
      boolean for whether to display the RSI, default FALSE
      </entry>
    </row>
    <row>
      <entry>
	macddays
    </entry>
    <entry>
      number of days used for computing MACD and RSI, default 60
      </entry>
    </row>
    <row>
      <entry>
	sort
    </entry>
    <entry>
      for what to sort on (VALUE, MACD, RSI), default VALUE
      </entry>
    </row>
    <row>
      <entry>
    </entry>
	<entry>
      </entry>
    </row>
	</tbody>
      </tgroup>
    </table>
  </para>
</chapter>
</book>
