package roart.config;

import java.util.HashMap;
import java.util.Map;

import roart.common.config.ConfigConstants;
import roart.iclij.config.IclijConfigConstants;
import roart.iclij.config.IclijXMLType;

public class IclijConfigConstantMaps {
    private static final String ACONFIG = "{ \"load\" : true, \"save\" : true, \"enable\" : true, \"evolve\" : true }";
    
    private static final String DISABLECONFIG = "{ \"load\" : true, \"save\" : true, \"enable\" : false, \"evolve\" : true }";

    private static final String MLCONFIG = "{ \"spark\" : { \"mlpc\" : " + ACONFIG + ", \"lor\" : " + ACONFIG + ", \"ovr\" : " + ACONFIG + ", \"lsvc\" : " + ACONFIG + " }, \"tensorflow\" : { \"dnn\" : " + ACONFIG + ",  \"lic\" : " + ACONFIG + ", \"lir\" : " + ACONFIG + ", \"mlp\" : " + ACONFIG + ", \"cnn\" : " + ACONFIG + ", \"cnn2\" : " + ACONFIG + ", \"rnn\" : " + ACONFIG + ", \"lstm\" : " + ACONFIG + ", \"gru\" : " + ACONFIG + " }, \"pytorch\" : { \"mlp\" : " + ACONFIG + ", \"cnn\" : " + ACONFIG + ", \"cnn2\" : " + ACONFIG + ", \"rnn\" : " + ACONFIG + ", \"lstm\" : " + ACONFIG + ", \"gru\" : " + ACONFIG + " }, \"gem\" : { \"ewc\" : " + ACONFIG + ", \"gem\" : " + ACONFIG + ", \"i\" : " + ACONFIG + ", \"icarl\" : " + DISABLECONFIG + ", \"mm\" : " + ACONFIG + ", \"s\" : " + ACONFIG + " } }";

    private static final String MLCONFIGPREDICTORLSTM = "{ \"tensorflow\" : { \"predictorlstm\" : " + ACONFIG + " } }";

    private static final String RECOMMENDEVOLUTIONCONFIG = "{ \"generations\" : 100, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 16, \"mutate\" : 2, \"generationcreate\" : 1, \"useoldelite\" : true }";

    private static final String MLEVOLUTIONCONFIG = "{ \"generations\" : 10, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 4, \"mutate\" : 2, \"generationcreate\" : 1, \"useoldelite\" : true }";
    
    public static Map<String, Class> map = new HashMap<>();

    public static void makeTypeMap() {
        if (!map.isEmpty()) {
            return;
        }
        map.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTML, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTMLEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLTENSORFLOWSERVER, String.class);
        map.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDEREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTAUTORUN, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTFITNESSMINIMUM, Integer.class);
        map.put(IclijConfigConstants.CROSSTESTMLINDICATOR, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTMLINDICATOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLINDICATORMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLMACD, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTMLMACDEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLMACDMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLRSI, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTMLRSIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLRSIMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLATR, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTMLATREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLATRMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLCCI, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTMLCCIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLCCIMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLSTOCH, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTMLSTOCHEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLSTOCHMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLMULTI, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTMLMULTIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTMLMULTIMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTPREDICTOR, Boolean.class);
        map.put(IclijConfigConstants.CROSSTESTPREDICTOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTPREDICTORMLCONFIG, String.class);
        map.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.DATASETINDICATORRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.DATASETML, Boolean.class);
        map.put(IclijConfigConstants.DATASETMLEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLTENSORFLOWSERVER, String.class);
        map.put(IclijConfigConstants.DATASETINDICATORRECOMMENDEREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETAUTORUN, Boolean.class);
        map.put(IclijConfigConstants.DATASETFITNESSMINIMUM, Integer.class);
        map.put(IclijConfigConstants.DATASETMLINDICATOR, Boolean.class);
        map.put(IclijConfigConstants.DATASETMLINDICATOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLINDICATORMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLMACD, Boolean.class);
        map.put(IclijConfigConstants.DATASETMLMACDEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLMACDMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLRSI, Boolean.class);
        map.put(IclijConfigConstants.DATASETMLRSIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLRSIMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLATR, Boolean.class);
        map.put(IclijConfigConstants.DATASETMLATREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLATRMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLCCI, Boolean.class);
        map.put(IclijConfigConstants.DATASETMLCCIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLCCIMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLSTOCH, Boolean.class);
        map.put(IclijConfigConstants.DATASETMLSTOCHEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLSTOCHMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLMULTI, Boolean.class);
        map.put(IclijConfigConstants.DATASETMLMULTIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETMLMULTIMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.DATASETPREDICTOR, Boolean.class);
        map.put(IclijConfigConstants.DATASETPREDICTOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETPREDICTORMLCONFIG, String.class);
        map.put(IclijConfigConstants.DATASETINDICATORRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEML, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEMLEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLMLCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLTENSORFLOWSERVER, String.class);
        map.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEAUTORUN, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEFITNESSMINIMUM, Integer.class);
        map.put(IclijConfigConstants.EVOLVEMLINDICATOR, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEMLINDICATOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLINDICATORMLCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLMACD, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEMLMACDEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLMACDMLCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLRSI, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEMLRSIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLRSIMLCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLATR, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEMLATREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLATRMLCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLCCI, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEMLCCIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLCCIMLCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLSTOCH, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEMLSTOCHEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLSTOCHMLCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLMULTI, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEMLMULTIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEMLMULTIMLCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVERECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEPREDICTOR, Boolean.class);
        map.put(IclijConfigConstants.EVOLVEPREDICTOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.EVOLVEPREDICTORMLCONFIG, String.class);
        map.put(IclijConfigConstants.MISCSHUTDOWNHOUR, Integer.class);
        map.put(IclijConfigConstants.MPSERVERCPU, Double.class);
        map.put(IclijConfigConstants.MPCLIENTCPU, Double.class);
        map.put(IclijConfigConstants.FINDPROFITAUTORUN, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLDYNAMIC, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLINDICATOR, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLINDICATOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLINDICATORMLCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLMACD, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLMACDEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLMACDMLCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLRSI, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLRSIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLRSIMLCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLATR, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLATREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLATRMLCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLCCI, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLCCIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLCCIMLCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLSTOCH, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLSTOCHEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLSTOCHMLCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLMULTI, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITMLMULTIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITMLMULTIMLCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITPREDICTOR, Boolean.class);
        map.put(IclijConfigConstants.FINDPROFITPREDICTOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.FINDPROFITPREDICTORMLCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITAUTORUN, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITFITNESSMINIMUM, Integer.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLINDICATOR, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLINDICATOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLINDICATORMLCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLMACD, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLMACDEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLMACDMLCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLRSI, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLRSIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLRSIMLCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLATR, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLATREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLATRMLCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLCCI, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLCCIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLCCIMLCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLSTOCH, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLSTOCHEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLSTOCHMLCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLMULTI, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLMULTIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITMLMULTIMLCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITRECOMMENDER, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITPREDICTOR, Boolean.class);
        map.put(IclijConfigConstants.IMPROVEPROFITPREDICTOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.IMPROVEPROFITPREDICTORMLCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGAUTORUN, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLINDICATOR, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLINDICATOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLINDICATORMLCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLMACD, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLMACDEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLMACDMLCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLRSI, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLRSIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLRSIMLCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLATR, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLATREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLATRMLCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLCCI, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLCCIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLCCIMLCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLSTOCH, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLSTOCHEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLSTOCHMLCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLMULTI, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLMULTIEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGMLMULTIMLCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGPREDICTOR, Boolean.class);
        map.put(IclijConfigConstants.MACHINELEARNINGPREDICTOREVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MACHINELEARNINGPREDICTORMLCONFIG, String.class);
        map.put(IclijConfigConstants.SINGLEMARKETEVOLVEFIRSTONLY, Boolean.class);
        map.put(IclijConfigConstants.SINGLEMARKETLOOPS, Integer.class);
        map.put(IclijConfigConstants.SINGLEMARKETLOOPINTERVAL, Integer.class);
        map.put(IclijConfigConstants.VERIFICATION, Boolean.class);
        map.put(IclijConfigConstants.VERIFICATIONSAVE, Boolean.class);
        map.put(IclijConfigConstants.VERIFICATIONRECOMMENDERTOPBOTTOM, Integer.class);
        map.put(IclijConfigConstants.VERIFICATIONDAYS, Integer.class);
        map.put(IclijConfigConstants.VERIFICATIONEVOLVEFIRSTONLY, Boolean.class);
        map.put(IclijConfigConstants.VERIFICATIONLOOPS, Integer.class);
        map.put(IclijConfigConstants.VERIFICATIONLOOPINTERVAL, Integer.class);
        map.put(IclijConfigConstants.VERIFICATIONIMPROVEPROFIT, Boolean.class);
        map.put(IclijConfigConstants.MARKETSMARKETLISTMARKET, String.class);
        map.put(IclijConfigConstants.MARKETSMARKETLISTMARKETCONFIG, String.class);
        map.put(IclijConfigConstants.MARKETSMARKETLISTMARKETFILTER, String.class);
        //map.put(IclijConfigConstants.MARKETSMARKETLISTMARKETEVOLUTIONCONFIG, String.class);
        map.put(IclijConfigConstants.MARKETSMARKETLISTMARKETMLCONFIG, String.class);
        map.put(IclijConfigConstants.MARKETSFILTERMARKETSMARKET, String.class);
        map.put(IclijConfigConstants.MARKETSIMPORTANTSIMPORTANT, String.class);
        map.put(IclijConfigConstants.MARKETSMARKETLISTMARKET2, String.class);
        map.put(IclijConfigConstants.MARKETSTRADEMARKETSMARKET2, String.class);
        map.put(IclijConfigConstants.MARKETSIMPORTANTSIMPORTANT2, String.class);
    }

    public static Map<String, Object> deflt = new HashMap<>();
    public static void makeDefaultMap() {
        if (!deflt.isEmpty()) {
            return;
        }
        deflt.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDER, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTML, Boolean.FALSE);
        deflt.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDEREVOLUTIONCONFIG, RECOMMENDEVOLUTIONCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTMLEVOLUTIONCONFIG, MLEVOLUTIONCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTMLTENSORFLOWSERVER, "http://localhost:8000");
        deflt.put(IclijConfigConstants.CROSSTESTAUTORUN, Boolean.FALSE);
        deflt.put(IclijConfigConstants.CROSSTESTFITNESSMINIMUM, 10);
        deflt.put(IclijConfigConstants.CROSSTESTMLINDICATOR, Boolean.TRUE);
	deflt.put(IclijConfigConstants.CROSSTESTMLINDICATOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.CROSSTESTMLINDICATORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTMLMACD, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTMLMACDEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.CROSSTESTMLMACDMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTMLRSI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTMLRSIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.CROSSTESTMLRSIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTMLATR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTMLATREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.CROSSTESTMLATRMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTMLCCI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTMLCCIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.CROSSTESTMLCCIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTMLSTOCH, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTMLSTOCHEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.CROSSTESTMLSTOCHMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTMLMULTI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTMLMULTIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.CROSSTESTMLMULTIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.CROSSTESTRECOMMENDER, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTPREDICTOR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.CROSSTESTPREDICTOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.CROSSTESTPREDICTORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.DATASETINDICATORRECOMMENDER, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETML, Boolean.FALSE);
        deflt.put(IclijConfigConstants.DATASETINDICATORRECOMMENDEREVOLUTIONCONFIG, RECOMMENDEVOLUTIONCONFIG);
        deflt.put(IclijConfigConstants.DATASETMLEVOLUTIONCONFIG, MLEVOLUTIONCONFIG);
        deflt.put(IclijConfigConstants.DATASETMLTENSORFLOWSERVER, "http://localhost:8000");
        deflt.put(IclijConfigConstants.DATASETAUTORUN, Boolean.FALSE);
        deflt.put(IclijConfigConstants.DATASETFITNESSMINIMUM, 10);
        deflt.put(IclijConfigConstants.DATASETMLINDICATOR, Boolean.TRUE);
	deflt.put(IclijConfigConstants.DATASETMLINDICATOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.DATASETMLINDICATORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.DATASETMLMACD, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETMLMACDEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.DATASETMLMACDMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.DATASETMLRSI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETMLRSIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.DATASETMLRSIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.DATASETMLATR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETMLATREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.DATASETMLATRMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.DATASETMLCCI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETMLCCIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.DATASETMLCCIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.DATASETMLSTOCH, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETMLSTOCHEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.DATASETMLSTOCHMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.DATASETMLMULTI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETMLMULTIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.DATASETMLMULTIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.DATASETRECOMMENDER, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETPREDICTOR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.DATASETPREDICTOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.DATASETPREDICTORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDER, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEML, Boolean.FALSE);
        deflt.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, RECOMMENDEVOLUTIONCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEMLEVOLUTIONCONFIG, MLEVOLUTIONCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEMLTENSORFLOWSERVER, "http://localhost:8000");
        deflt.put(IclijConfigConstants.EVOLVEAUTORUN, Boolean.FALSE);
        deflt.put(IclijConfigConstants.EVOLVEFITNESSMINIMUM, 10);
        deflt.put(IclijConfigConstants.EVOLVEMLINDICATOR, Boolean.TRUE);
	deflt.put(IclijConfigConstants.EVOLVEMLINDICATOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.EVOLVEMLINDICATORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEMLMACD, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEMLMACDEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.EVOLVEMLMACDMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEMLRSI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEMLRSIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.EVOLVEMLRSIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEMLATR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEMLATREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.EVOLVEMLATRMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEMLCCI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEMLCCIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.EVOLVEMLCCIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEMLSTOCH, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEMLSTOCHEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.EVOLVEMLSTOCHMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.EVOLVEMLMULTI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEMLMULTIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.EVOLVEMLMULTIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.EVOLVERECOMMENDER, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEPREDICTOR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.EVOLVEPREDICTOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.EVOLVEPREDICTORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MPSERVERCPU, 0.5);
        deflt.put(IclijConfigConstants.MPCLIENTCPU, 0.5);
        deflt.put(IclijConfigConstants.FINDPROFITAUTORUN, Boolean.FALSE);
        deflt.put(IclijConfigConstants.FINDPROFITMLDYNAMIC, Boolean.FALSE);
        deflt.put(IclijConfigConstants.FINDPROFITMLINDICATOR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.FINDPROFITMLINDICATOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.FINDPROFITMLINDICATORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.FINDPROFITMLMACD, Boolean.TRUE);
        deflt.put(IclijConfigConstants.FINDPROFITMLMACDEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.FINDPROFITMLMACDMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.FINDPROFITMLRSI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.FINDPROFITMLRSIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.FINDPROFITMLRSIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.FINDPROFITMLATR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.FINDPROFITMLATREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.FINDPROFITMLATRMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.FINDPROFITMLCCI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.FINDPROFITMLCCIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.FINDPROFITMLCCIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.FINDPROFITMLSTOCH, Boolean.TRUE);
        deflt.put(IclijConfigConstants.FINDPROFITMLSTOCHEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.FINDPROFITMLSTOCHMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.FINDPROFITMLMULTI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.FINDPROFITMLMULTIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.FINDPROFITMLMULTIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.FINDPROFITRECOMMENDER, Boolean.TRUE);
        deflt.put(IclijConfigConstants.FINDPROFITPREDICTOR, Boolean.FALSE);
        deflt.put(IclijConfigConstants.FINDPROFITPREDICTOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.FINDPROFITPREDICTORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.IMPROVEPROFITAUTORUN, Boolean.FALSE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITFITNESSMINIMUM, 10);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLINDICATOR, Boolean.TRUE);
	deflt.put(IclijConfigConstants.IMPROVEPROFITMLINDICATOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLINDICATORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLMACD, Boolean.TRUE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLMACDEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLMACDMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLRSI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLRSIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLRSIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLATR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLATREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLATRMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLCCI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLCCIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLCCIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLSTOCH, Boolean.TRUE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLSTOCHEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLSTOCHMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLMULTI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLMULTIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.IMPROVEPROFITMLMULTIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.IMPROVEPROFITRECOMMENDER, Boolean.TRUE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITPREDICTOR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.IMPROVEPROFITPREDICTOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.IMPROVEPROFITPREDICTORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MACHINELEARNINGAUTORUN, Boolean.FALSE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLINDICATOR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLINDICATOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLINDICATORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLMACD, Boolean.TRUE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLMACDEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLMACDMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLRSI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLRSIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLRSIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLATR, Boolean.TRUE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLATREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLATRMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLCCI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLCCIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLCCIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLSTOCH, Boolean.TRUE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLSTOCHEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLSTOCHMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLMULTI, Boolean.TRUE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLMULTIEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MACHINELEARNINGMLMULTIMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.MACHINELEARNINGPREDICTOR, Boolean.FALSE);
        deflt.put(IclijConfigConstants.MACHINELEARNINGPREDICTOREVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MACHINELEARNINGPREDICTORMLCONFIG, MLCONFIG);
        deflt.put(IclijConfigConstants.SINGLEMARKETEVOLVEFIRSTONLY, Boolean.TRUE);
        deflt.put(IclijConfigConstants.SINGLEMARKETLOOPS, 5);
        deflt.put(IclijConfigConstants.SINGLEMARKETLOOPINTERVAL, 20);
        deflt.put(IclijConfigConstants.VERIFICATION, Boolean.TRUE);
        deflt.put(IclijConfigConstants.VERIFICATIONSAVE, Boolean.FALSE);
        deflt.put(IclijConfigConstants.VERIFICATIONRECOMMENDERTOPBOTTOM, 10);
        deflt.put(IclijConfigConstants.VERIFICATIONDAYS, 20);
        deflt.put(IclijConfigConstants.VERIFICATIONEVOLVEFIRSTONLY, Boolean.TRUE);
        deflt.put(IclijConfigConstants.VERIFICATIONLOOPS, 5);
        deflt.put(IclijConfigConstants.VERIFICATIONLOOPINTERVAL, 20);
        deflt.put(IclijConfigConstants.VERIFICATIONIMPROVEPROFIT, Boolean.FALSE);
        //deflt.put(IclijConfigConstants.MARKETSMARKETLISTMARKETEVOLUTIONCONFIG, null);
        deflt.put(IclijConfigConstants.MARKETSMARKETLISTMARKETMLCONFIG, MLCONFIG);
    }

    public static Map<String, String> text = new HashMap<>();

    public static void makeTextMap() {
        if (!text.isEmpty()) {
            return;
        }
        text.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDER, "Enable evolution generated recommender settings");
        text.put(IclijConfigConstants.CROSSTESTML, "Enable evolution generated ml configs");
        text.put(IclijConfigConstants.CROSSTESTMLEVOLUTIONCONFIG, "ML GP config");
        text.put(IclijConfigConstants.CROSSTESTMLMLCONFIG, "Evolution default ml enabled");
        text.put(IclijConfigConstants.CROSSTESTMLTENSORFLOWSERVER, "Enable evolution generated ml server");
        text.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDEREVOLUTIONCONFIG, "Indicator recommender GP config");
        text.put(IclijConfigConstants.CROSSTESTAUTORUN, "Enable crosstest autorun");
        text.put(IclijConfigConstants.CROSSTESTFITNESSMINIMUM, "Enable crosstest fitness minimum");
        text.put(IclijConfigConstants.CROSSTESTMLINDICATOR, "Enable crosstest mlindicator");
        text.put(IclijConfigConstants.CROSSTESTMLINDICATOREVOLUTIONCONFIG, "crosstest mlindicator evolution config");
        text.put(IclijConfigConstants.CROSSTESTMLINDICATORMLCONFIG, "crosstest mlindicator ml enabled");
        text.put(IclijConfigConstants.CROSSTESTMLMACD, "Enable crosstest mlmacd");
        text.put(IclijConfigConstants.CROSSTESTMLMACDEVOLUTIONCONFIG, "crosstest mlmacd evolution config");
        text.put(IclijConfigConstants.CROSSTESTMLMACDMLCONFIG, "crosstest mlmacd ml enabled");
        text.put(IclijConfigConstants.CROSSTESTMLRSI, "Enable crosstest mlrsi");
        text.put(IclijConfigConstants.CROSSTESTMLRSIEVOLUTIONCONFIG, "crosstest mlrsi evolution config");
        text.put(IclijConfigConstants.CROSSTESTMLRSIMLCONFIG, "crosstest mlrsi ml enabled");
        text.put(IclijConfigConstants.CROSSTESTMLATR, "Enable crosstest mlatr");
        text.put(IclijConfigConstants.CROSSTESTMLATREVOLUTIONCONFIG, "crosstest mlatr evolution config");
        text.put(IclijConfigConstants.CROSSTESTMLATRMLCONFIG, "crosstest mlatr ml enabled");
        text.put(IclijConfigConstants.CROSSTESTMLCCI, "Enable crosstest mlcci");
        text.put(IclijConfigConstants.CROSSTESTMLCCIEVOLUTIONCONFIG, "crosstest mlcci evolution config");
        text.put(IclijConfigConstants.CROSSTESTMLCCIMLCONFIG, "crosstest mlcci ml enabled");
        text.put(IclijConfigConstants.CROSSTESTMLSTOCH, "Enable crosstest mlstoch");
        text.put(IclijConfigConstants.CROSSTESTMLSTOCHEVOLUTIONCONFIG, "crosstest mlstoch evolution config");
        text.put(IclijConfigConstants.CROSSTESTMLSTOCHMLCONFIG, "crosstest mlstoch ml enabled");
        text.put(IclijConfigConstants.CROSSTESTMLMULTI, "Enable crosstest mlmulti");
        text.put(IclijConfigConstants.CROSSTESTMLMULTIEVOLUTIONCONFIG, "crosstest mlmulti evolution config");
        text.put(IclijConfigConstants.CROSSTESTMLMULTIMLCONFIG, "crosstest mlmulti ml enabled");
        text.put(IclijConfigConstants.CROSSTESTRECOMMENDER, "Enable crosstest evolution based");
        text.put(IclijConfigConstants.CROSSTESTPREDICTOR, "Enable crosstest predictor");
        text.put(IclijConfigConstants.CROSSTESTPREDICTOREVOLUTIONCONFIG, "crosstest predictor evolution config");
        text.put(IclijConfigConstants.CROSSTESTPREDICTORMLCONFIG, "crosstest predictor ml enable");
        text.put(IclijConfigConstants.DATASETINDICATORRECOMMENDER, "Enable evolution generated recommender settings");
        text.put(IclijConfigConstants.DATASETML, "Enable evolution generated ml configs");
        text.put(IclijConfigConstants.DATASETMLEVOLUTIONCONFIG, "ML GP config");
        text.put(IclijConfigConstants.DATASETMLMLCONFIG, "Evolution default ml enabled");
        text.put(IclijConfigConstants.DATASETMLTENSORFLOWSERVER, "Enable evolution generated ml server");
        text.put(IclijConfigConstants.DATASETINDICATORRECOMMENDEREVOLUTIONCONFIG, "Indicator recommender GP config");
        text.put(IclijConfigConstants.DATASETAUTORUN, "Enable dataset autorun");
        text.put(IclijConfigConstants.DATASETFITNESSMINIMUM, "Enable dataset fitness minimum");
        text.put(IclijConfigConstants.DATASETMLINDICATOR, "Enable dataset mlindicator");
        text.put(IclijConfigConstants.DATASETMLINDICATOREVOLUTIONCONFIG, "dataset mlindicator evolution config");
        text.put(IclijConfigConstants.DATASETMLINDICATORMLCONFIG, "dataset mlindicator ml enabled");
        text.put(IclijConfigConstants.DATASETMLMACD, "Enable dataset mlmacd");
        text.put(IclijConfigConstants.DATASETMLMACDEVOLUTIONCONFIG, "dataset mlmacd evolution config");
        text.put(IclijConfigConstants.DATASETMLMACDMLCONFIG, "dataset mlmacd ml enabled");
        text.put(IclijConfigConstants.DATASETMLRSI, "Enable dataset mlrsi");
        text.put(IclijConfigConstants.DATASETMLRSIEVOLUTIONCONFIG, "dataset mlrsi evolution config");
        text.put(IclijConfigConstants.DATASETMLRSIMLCONFIG, "dataset mlrsi ml enabled");
        text.put(IclijConfigConstants.DATASETMLATR, "Enable dataset mlatr");
        text.put(IclijConfigConstants.DATASETMLATREVOLUTIONCONFIG, "dataset mlatr evolution config");
        text.put(IclijConfigConstants.DATASETMLATRMLCONFIG, "dataset mlatr ml enabled");
        text.put(IclijConfigConstants.DATASETMLCCI, "Enable dataset mlcci");
        text.put(IclijConfigConstants.DATASETMLCCIEVOLUTIONCONFIG, "dataset mlcci evolution config");
        text.put(IclijConfigConstants.DATASETMLCCIMLCONFIG, "dataset mlcci ml enabled");
        text.put(IclijConfigConstants.DATASETMLSTOCH, "Enable dataset mlstoch");
        text.put(IclijConfigConstants.DATASETMLSTOCHEVOLUTIONCONFIG, "dataset mlstoch evolution config");
        text.put(IclijConfigConstants.DATASETMLSTOCHMLCONFIG, "dataset mlstoch ml enabled");
        text.put(IclijConfigConstants.DATASETMLMULTI, "Enable dataset mlmulti");
        text.put(IclijConfigConstants.DATASETMLMULTIEVOLUTIONCONFIG, "dataset mlmulti evolution config");
        text.put(IclijConfigConstants.DATASETMLMULTIMLCONFIG, "dataset mlmulti ml enabled");
        text.put(IclijConfigConstants.DATASETRECOMMENDER, "Enable dataset evolution based");
        text.put(IclijConfigConstants.DATASETPREDICTOR, "Enable dataset predictor");
        text.put(IclijConfigConstants.DATASETPREDICTOREVOLUTIONCONFIG, "dataset predictor evolution config");
        text.put(IclijConfigConstants.DATASETPREDICTORMLCONFIG, "dataset predictor ml enable");
        text.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDER, "Enable evolution generated recommender settings");
        text.put(IclijConfigConstants.EVOLVEML, "Enable evolution generated ml configs");
        text.put(IclijConfigConstants.EVOLVEMLEVOLUTIONCONFIG, "ML GP config");
        text.put(IclijConfigConstants.EVOLVEMLMLCONFIG, "Evolution default ml enabled");
        text.put(IclijConfigConstants.EVOLVEMLTENSORFLOWSERVER, "Enable evolution generated ml server");
        text.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, "Indicator recommender GP config");
        text.put(IclijConfigConstants.EVOLVEAUTORUN, "Enable evolve autorun");
        text.put(IclijConfigConstants.EVOLVEFITNESSMINIMUM, "Enable evolve fitness minimum");
        text.put(IclijConfigConstants.EVOLVEMLINDICATOR, "Enable evolve mlindicator");
        text.put(IclijConfigConstants.EVOLVEMLINDICATOREVOLUTIONCONFIG, "evolve mlindicator evolution config");
        text.put(IclijConfigConstants.EVOLVEMLINDICATORMLCONFIG, "evolve mlindicator ml enabled");
        text.put(IclijConfigConstants.EVOLVEMLMACD, "Enable evolve mlmacd");
        text.put(IclijConfigConstants.EVOLVEMLMACDEVOLUTIONCONFIG, "evolve mlmacd evolution config");
        text.put(IclijConfigConstants.EVOLVEMLMACDMLCONFIG, "evolve mlmacd ml enabled");
        text.put(IclijConfigConstants.EVOLVEMLRSI, "Enable evolve mlrsi");
        text.put(IclijConfigConstants.EVOLVEMLRSIEVOLUTIONCONFIG, "evolve mlrsi evolution config");
        text.put(IclijConfigConstants.EVOLVEMLRSIMLCONFIG, "evolve mlrsi ml enabled");
        text.put(IclijConfigConstants.EVOLVEMLATR, "Enable evolve mlatr");
        text.put(IclijConfigConstants.EVOLVEMLATREVOLUTIONCONFIG, "evolve mlatr evolution config");
        text.put(IclijConfigConstants.EVOLVEMLATRMLCONFIG, "evolve mlatr ml enabled");
        text.put(IclijConfigConstants.EVOLVEMLCCI, "Enable evolve mlcci");
        text.put(IclijConfigConstants.EVOLVEMLCCIEVOLUTIONCONFIG, "evolve mlcci evolution config");
        text.put(IclijConfigConstants.EVOLVEMLCCIMLCONFIG, "evolve mlcci ml enabled");
        text.put(IclijConfigConstants.EVOLVEMLSTOCH, "Enable evolve mlstoch");
        text.put(IclijConfigConstants.EVOLVEMLSTOCHEVOLUTIONCONFIG, "evolve mlstoch evolution config");
        text.put(IclijConfigConstants.EVOLVEMLSTOCHMLCONFIG, "evolve mlstoch ml enabled");
        text.put(IclijConfigConstants.EVOLVEMLMULTI, "Enable evolve mlmulti");
        text.put(IclijConfigConstants.EVOLVEMLMULTIEVOLUTIONCONFIG, "evolve mlmulti evolution config");
        text.put(IclijConfigConstants.EVOLVEMLMULTIMLCONFIG, "evolve mlmulti ml enabled");
        text.put(IclijConfigConstants.EVOLVERECOMMENDER, "Enable evolve evolution based");
        text.put(IclijConfigConstants.EVOLVEPREDICTOR, "Enable evolve predictor");
        text.put(IclijConfigConstants.EVOLVEPREDICTOREVOLUTIONCONFIG, "evolve predictor evolution config");
        text.put(IclijConfigConstants.EVOLVEPREDICTORMLCONFIG, "evolve predictor ml enable");
        text.put(IclijConfigConstants.MISCSHUTDOWNHOUR, "Server shutdown hour");
        text.put(IclijConfigConstants.MPSERVERCPU, "Server cpu usage");
        text.put(IclijConfigConstants.MPCLIENTCPU, "Client cpu usage");
        text.put(IclijConfigConstants.FINDPROFITAUTORUN, "Enable find profit autorun");
        text.put(IclijConfigConstants.FINDPROFITMLDYNAMIC, "Do machine learning dynamically if no persistent present");
        text.put(IclijConfigConstants.FINDPROFITMLINDICATOR, "Enable find profit mlindicator");
        text.put(IclijConfigConstants.FINDPROFITMLINDICATOREVOLUTIONCONFIG, "Find profit mlindicator evolution config");
        text.put(IclijConfigConstants.FINDPROFITMLINDICATORMLCONFIG, "Find profit mlindicator ml enabled");
        text.put(IclijConfigConstants.FINDPROFITMLMACD, "Enable find profit mlmacd");
        text.put(IclijConfigConstants.FINDPROFITMLMACDEVOLUTIONCONFIG, "Find profit mlmacd evolution config");
        text.put(IclijConfigConstants.FINDPROFITMLMACDMLCONFIG, "Find profit mlmacd ml enabled");
        text.put(IclijConfigConstants.FINDPROFITMLRSI, "Enable find profit mlrsi");
        text.put(IclijConfigConstants.FINDPROFITMLRSIEVOLUTIONCONFIG, "Find profit mlrsi evolution config");
        text.put(IclijConfigConstants.FINDPROFITMLRSIMLCONFIG, "Find profit mlrsi ml enabled");
        text.put(IclijConfigConstants.FINDPROFITMLATR, "Enable find profit mlatr");
        text.put(IclijConfigConstants.FINDPROFITMLATREVOLUTIONCONFIG, "Find profit mlatr evolution config");
        text.put(IclijConfigConstants.FINDPROFITMLATRMLCONFIG, "Find profit mlatr ml enabled");
        text.put(IclijConfigConstants.FINDPROFITMLCCI, "Enable find profit mlcci");
        text.put(IclijConfigConstants.FINDPROFITMLCCIEVOLUTIONCONFIG, "Find profit mlcci evolution config");
        text.put(IclijConfigConstants.FINDPROFITMLCCIMLCONFIG, "Find profit mlcci ml enabled");
        text.put(IclijConfigConstants.FINDPROFITMLSTOCH, "Enable find profit mlstoch");
        text.put(IclijConfigConstants.FINDPROFITMLSTOCHEVOLUTIONCONFIG, "Find profit mlstoch evolution config");
        text.put(IclijConfigConstants.FINDPROFITMLSTOCHMLCONFIG, "Find profit mlstoch ml enabled");
        text.put(IclijConfigConstants.FINDPROFITMLMULTI, "Enable find profit mlmulti");
        text.put(IclijConfigConstants.FINDPROFITMLMULTIEVOLUTIONCONFIG, "Find profit mlmulti evolution config");
        text.put(IclijConfigConstants.FINDPROFITMLMULTIMLCONFIG, "Find profit mlmulti ml enabled");
        text.put(IclijConfigConstants.FINDPROFITRECOMMENDER, "Enable find profit evolution based");
        text.put(IclijConfigConstants.FINDPROFITPREDICTOR, "Enable find profit predictor");
        text.put(IclijConfigConstants.FINDPROFITPREDICTOREVOLUTIONCONFIG, "Find profit predictor evolution config");
        text.put(IclijConfigConstants.FINDPROFITPREDICTORMLCONFIG, "Find profit predictor ml enabled");
        text.put(IclijConfigConstants.IMPROVEPROFITAUTORUN, "Enable improve profit autorun");
        text.put(IclijConfigConstants.IMPROVEPROFITFITNESSMINIMUM, "Enable improve profit fitness minimum");
        text.put(IclijConfigConstants.IMPROVEPROFITMLINDICATOR, "Enable improve profit mlindicator");
        text.put(IclijConfigConstants.IMPROVEPROFITMLINDICATOREVOLUTIONCONFIG, "Improve profit mlindicator evolution config");
        text.put(IclijConfigConstants.IMPROVEPROFITMLINDICATORMLCONFIG, "Improve profit mlindicator ml enabled");
        text.put(IclijConfigConstants.IMPROVEPROFITMLMACD, "Enable improve profit mlmacd");
        text.put(IclijConfigConstants.IMPROVEPROFITMLMACDEVOLUTIONCONFIG, "Improve profit mlmacd evolution config");
        text.put(IclijConfigConstants.IMPROVEPROFITMLMACDMLCONFIG, "Improve profit mlmacd ml enabled");
        text.put(IclijConfigConstants.IMPROVEPROFITMLRSI, "Enable improve profit mlrsi");
        text.put(IclijConfigConstants.IMPROVEPROFITMLRSIEVOLUTIONCONFIG, "Improve profit mlrsi evolution config");
        text.put(IclijConfigConstants.IMPROVEPROFITMLRSIMLCONFIG, "Improve profit mlrsi ml enabled");
        text.put(IclijConfigConstants.IMPROVEPROFITMLATR, "Enable improve profit mlatr");
        text.put(IclijConfigConstants.IMPROVEPROFITMLATREVOLUTIONCONFIG, "Improve profit mlatr evolution config");
        text.put(IclijConfigConstants.IMPROVEPROFITMLATRMLCONFIG, "Improve profit mlatr ml enabled");
        text.put(IclijConfigConstants.IMPROVEPROFITMLCCI, "Enable improve profit mlcci");
        text.put(IclijConfigConstants.IMPROVEPROFITMLCCIEVOLUTIONCONFIG, "Improve profit mlcci evolution config");
        text.put(IclijConfigConstants.IMPROVEPROFITMLCCIMLCONFIG, "Improve profit mlcci ml enabled");
        text.put(IclijConfigConstants.IMPROVEPROFITMLSTOCH, "Enable improve profit mlstoch");
        text.put(IclijConfigConstants.IMPROVEPROFITMLSTOCHEVOLUTIONCONFIG, "Improve profit mlstoch evolution config");
        text.put(IclijConfigConstants.IMPROVEPROFITMLSTOCHMLCONFIG, "Improve profit mlstoch ml enabled");
        text.put(IclijConfigConstants.IMPROVEPROFITMLMULTI, "Enable improve profit mlmulti");
        text.put(IclijConfigConstants.IMPROVEPROFITMLMULTIEVOLUTIONCONFIG, "Improve profit mlmulti evolution config");
        text.put(IclijConfigConstants.IMPROVEPROFITMLMULTIMLCONFIG, "Improve profit mlmulti ml enabled");
        text.put(IclijConfigConstants.IMPROVEPROFITRECOMMENDER, "Enable improve profit evolution based");
        text.put(IclijConfigConstants.IMPROVEPROFITPREDICTOR, "Enable improve profit predictor");
        text.put(IclijConfigConstants.IMPROVEPROFITPREDICTOREVOLUTIONCONFIG, "Improve profit predictor evolution config");
        text.put(IclijConfigConstants.IMPROVEPROFITPREDICTORMLCONFIG, "Improve profit predictor ml enable");
        text.put(IclijConfigConstants.MACHINELEARNINGAUTORUN, "Enable machine learning autorun");
        text.put(IclijConfigConstants.MACHINELEARNINGMLINDICATOR, "Enable machine learning mlindicator");
        text.put(IclijConfigConstants.MACHINELEARNINGMLINDICATOREVOLUTIONCONFIG, "machine learning mlindicator evolution config");
        text.put(IclijConfigConstants.MACHINELEARNINGMLINDICATORMLCONFIG, "machine learning mlindicator ml enabled");
        text.put(IclijConfigConstants.MACHINELEARNINGMLMACD, "Enable machine learning mlmacd");
        text.put(IclijConfigConstants.MACHINELEARNINGMLMACDEVOLUTIONCONFIG, "machine learning mlmacd evolution config");
        text.put(IclijConfigConstants.MACHINELEARNINGMLMACDMLCONFIG, "machine learning mlmacd ml enabled");
        text.put(IclijConfigConstants.MACHINELEARNINGMLRSI, "Enable machine learning mlrsi");
        text.put(IclijConfigConstants.MACHINELEARNINGMLRSIEVOLUTIONCONFIG, "machine learning mlrsi evolution config");
        text.put(IclijConfigConstants.MACHINELEARNINGMLRSIMLCONFIG, "machine learning mlrsi ml enabled");
        text.put(IclijConfigConstants.MACHINELEARNINGMLATR, "Enable machine learning mlatr");
        text.put(IclijConfigConstants.MACHINELEARNINGMLATREVOLUTIONCONFIG, "machine learning mlatr evolution config");
        text.put(IclijConfigConstants.MACHINELEARNINGMLATRMLCONFIG, "machine learning mlatr ml enabled");
        text.put(IclijConfigConstants.MACHINELEARNINGMLCCI, "Enable machine learning mlcci");
        text.put(IclijConfigConstants.MACHINELEARNINGMLCCIEVOLUTIONCONFIG, "machine learning mlcci evolution config");
        text.put(IclijConfigConstants.MACHINELEARNINGMLCCIMLCONFIG, "machine learning mlcci ml enabled");
        text.put(IclijConfigConstants.MACHINELEARNINGMLSTOCH, "Enable machine learning mlstoch");
        text.put(IclijConfigConstants.MACHINELEARNINGMLSTOCHEVOLUTIONCONFIG, "machine learning mlstoch evolution config");
        text.put(IclijConfigConstants.MACHINELEARNINGMLSTOCHMLCONFIG, "machine learning mlstoch ml enabled");
        text.put(IclijConfigConstants.MACHINELEARNINGMLMULTI, "Enable machine learning mlmulti");
        text.put(IclijConfigConstants.MACHINELEARNINGMLMULTIEVOLUTIONCONFIG, "machine learning mlmulti evolution config");
        text.put(IclijConfigConstants.MACHINELEARNINGMLMULTIMLCONFIG, "machine learning mlmulti ml enabled");
        text.put(IclijConfigConstants.MACHINELEARNINGPREDICTOR, "Enable machine learning predictor");
        text.put(IclijConfigConstants.MACHINELEARNINGPREDICTOREVOLUTIONCONFIG, "machine learning predictor evolution config");
        text.put(IclijConfigConstants.MACHINELEARNINGPREDICTORMLCONFIG, "machine learning predictor ml enabled");
        text.put(IclijConfigConstants.SINGLEMARKETEVOLVEFIRSTONLY, "Single market loops with evolve first only");
        text.put(IclijConfigConstants.SINGLEMARKETLOOPS, "Single market loops");
        text.put(IclijConfigConstants.SINGLEMARKETLOOPINTERVAL, "Single market loop interval");
        text.put(IclijConfigConstants.VERIFICATION, "Enable verification");
        text.put(IclijConfigConstants.VERIFICATIONSAVE, "Enable verification save");
        text.put(IclijConfigConstants.VERIFICATIONDAYS, "Verification days");
        text.put(IclijConfigConstants.VERIFICATIONEVOLVEFIRSTONLY, "Verification loops with evolve first only");
        text.put(IclijConfigConstants.VERIFICATIONLOOPS, "Verification loops");
        text.put(IclijConfigConstants.VERIFICATIONLOOPINTERVAL, "Verification loop interval");
        text.put(IclijConfigConstants.VERIFICATIONRECOMMENDERTOPBOTTOM, "Number of entries to pick from recommender lists");
        text.put(IclijConfigConstants.VERIFICATIONIMPROVEPROFIT, "Enable improve profit");
        //text.put(IclijConfigConstants.MARKETSMARKETLISTMARKETEVOLUTIONCONFIG, "Market ML evolution config");
        text.put(IclijConfigConstants.MARKETSMARKETLISTMARKETMLCONFIG, "Market ML config");
   }

    public static Map<String, String> conv = new HashMap<>();
    public static void makeConvertMap() {
        if (!conv.isEmpty()) {
            return;
        }
        conv.put(IclijConfigConstants.EVOLVEMLTENSORFLOWSERVER, ConfigConstants.MACHINELEARNINGTENSORFLOWSERVER);
        conv.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, ConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG);
        conv.put(IclijConfigConstants.EVOLVEMLEVOLUTIONCONFIG, ConfigConstants.EVOLVEMLEVOLUTIONCONFIG);
    }
    
    public static Map<String, IclijXMLType> mymap = new HashMap<>();
    public static void makeMap() {
        mymap.put(IclijConfigConstants.CROSSTEST, new IclijXMLType(null, null, null));
        mymap.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDER, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolution generated recommender settings"));
        mymap.put(IclijConfigConstants.CROSSTESTML, new IclijXMLType(Boolean.class, Boolean.FALSE, "Crosstest ML enable"));
        mymap.put(IclijConfigConstants.CROSSTESTMLEVOLUTIONCONFIG, new IclijXMLType( String.class, "{ \"generations\" : 10, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 4, \"mutate\" : 2, \"generationcreate\" : 1 }", "ML GP config"));
        mymap.put(IclijConfigConstants.CROSSTESTMLMLCONFIG, new IclijXMLType(String.class, null, "Evolution default ml enabled"));
        mymap.put(IclijConfigConstants.CROSSTESTMLTENSORFLOWSERVER, new IclijXMLType(String.class, "http://localhost:8000", "Enable evolution generated ml server", ConfigConstants.MACHINELEARNINGTENSORFLOWSERVER));
        mymap.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDEREVOLUTIONCONFIG, new IclijXMLType( String.class, "{ \"generations\" : 100, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 16, \"mutate\" : 2, \"generationcreate\" : 1 }", "Indicator recommender GP config"));
        mymap.put(IclijConfigConstants.CROSSTESTAUTORUN, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable crosstest autorun"));
        mymap.put(IclijConfigConstants.CROSSTESTFITNESSMINIMUM, new IclijXMLType(Integer.class, 10, "Enable crosstest fitness minimum"));
        mymap.put(IclijConfigConstants.CROSSTESTMLINDICATOR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable crosstest mlindicator"));
        mymap.put(IclijConfigConstants.CROSSTESTMLINDICATOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "crosstest mlindicator evolution config"));
        mymap.put(IclijConfigConstants.CROSSTESTMLINDICATORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "crosstest mlindicator ml enable"));
        mymap.put(IclijConfigConstants.CROSSTESTMLMACD, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable crosstest mlmacd"));
        mymap.put(IclijConfigConstants.CROSSTESTMLMACDEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "crosstest mlmacd evolution config"));
        mymap.put(IclijConfigConstants.CROSSTESTMLMACDMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "crosstest mlmacd enable"));
        mymap.put(IclijConfigConstants.CROSSTESTMLRSI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable crosstest mlrsi"));
        mymap.put(IclijConfigConstants.CROSSTESTMLRSIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "crosstest mlrsi evolution config"));
        mymap.put(IclijConfigConstants.CROSSTESTMLRSIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "crosstest mlrsi enable"));
        mymap.put(IclijConfigConstants.CROSSTESTMLATR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable crosstest mlatr"));
        mymap.put(IclijConfigConstants.CROSSTESTMLATREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "crosstest mlatr evolution config"));
        mymap.put(IclijConfigConstants.CROSSTESTMLATRMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "crosstest mlatr enable"));
        mymap.put(IclijConfigConstants.CROSSTESTMLCCI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable crosstest mlcci"));
        mymap.put(IclijConfigConstants.CROSSTESTMLCCIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "crosstest mlcci evolution config"));
        mymap.put(IclijConfigConstants.CROSSTESTMLCCIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "crosstest mlcci enable"));
        mymap.put(IclijConfigConstants.CROSSTESTMLSTOCH, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable crosstest mlstoch"));
        mymap.put(IclijConfigConstants.CROSSTESTMLSTOCHEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "crosstest mlstoch evolution config"));
        mymap.put(IclijConfigConstants.CROSSTESTMLSTOCHMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "crosstest mlstoch enable"));
        mymap.put(IclijConfigConstants.CROSSTESTMLMULTI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable crosstest mlmulti"));
        mymap.put(IclijConfigConstants.CROSSTESTMLMULTIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "crosstest mlmulti evolution config"));
        mymap.put(IclijConfigConstants.CROSSTESTMLMULTIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "crosstest mlmulti enable"));
        mymap.put(IclijConfigConstants.CROSSTESTRECOMMENDER, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable crosstest evolution based"));
        mymap.put(IclijConfigConstants.CROSSTESTPREDICTOR, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable crosstest predictor"));
        mymap.put(IclijConfigConstants.CROSSTESTPREDICTOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "crosstest predictor evolution config"));
        mymap.put(IclijConfigConstants.CROSSTESTPREDICTORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "crosstest predictor ml enable"));
        mymap.put(IclijConfigConstants.CROSSTEST, new IclijXMLType(null, null, null));
        mymap.put(IclijConfigConstants.CROSSTESTINDICATORRECOMMENDER, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolution generated recommender settings"));
        mymap.put(IclijConfigConstants.DATASETML, new IclijXMLType(Boolean.class, Boolean.FALSE, "Dataset ML enable"));
        mymap.put(IclijConfigConstants.DATASETMLEVOLUTIONCONFIG, new IclijXMLType( String.class, "{ \"generations\" : 10, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 4, \"mutate\" : 2, \"generationcreate\" : 1 }", "ML GP config"));
        mymap.put(IclijConfigConstants.DATASETMLMLCONFIG, new IclijXMLType(String.class, null, "Evolution default ml enabled"));
        mymap.put(IclijConfigConstants.DATASETMLTENSORFLOWSERVER, new IclijXMLType(String.class, "http://localhost:8000", "Enable evolution generated ml server", ConfigConstants.MACHINELEARNINGTENSORFLOWSERVER));
        mymap.put(IclijConfigConstants.DATASETINDICATORRECOMMENDEREVOLUTIONCONFIG, new IclijXMLType( String.class, "{ \"generations\" : 100, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 16, \"mutate\" : 2, \"generationcreate\" : 1 }", "Indicator recommender GP config"));
        mymap.put(IclijConfigConstants.DATASETAUTORUN, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable dataset autorun"));
        mymap.put(IclijConfigConstants.DATASETFITNESSMINIMUM, new IclijXMLType(Integer.class, 10, "Enable dataset fitness minimum"));
        mymap.put(IclijConfigConstants.DATASETMLINDICATOR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable dataset mlindicator"));
        mymap.put(IclijConfigConstants.DATASETMLINDICATOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "dataset mlindicator evolution config"));
        mymap.put(IclijConfigConstants.DATASETMLINDICATORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "dataset mlindicator ml enable"));
        mymap.put(IclijConfigConstants.DATASETMLMACD, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable dataset mlmacd"));
        mymap.put(IclijConfigConstants.DATASETMLMACDEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "dataset mlmacd evolution config"));
        mymap.put(IclijConfigConstants.DATASETMLMACDMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "dataset mlmacd enable"));
        mymap.put(IclijConfigConstants.DATASETMLRSI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable dataset mlrsi"));
        mymap.put(IclijConfigConstants.DATASETMLRSIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "dataset mlrsi evolution config"));
        mymap.put(IclijConfigConstants.DATASETMLRSIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "dataset mlrsi enable"));
        mymap.put(IclijConfigConstants.DATASETMLATR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable dataset mlatr"));
        mymap.put(IclijConfigConstants.DATASETMLATREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "dataset mlatr evolution config"));
        mymap.put(IclijConfigConstants.DATASETMLATRMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "dataset mlatr enable"));
        mymap.put(IclijConfigConstants.DATASETMLCCI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable dataset mlcci"));
        mymap.put(IclijConfigConstants.DATASETMLCCIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "dataset mlcci evolution config"));
        mymap.put(IclijConfigConstants.DATASETMLCCIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "dataset mlcci enable"));
        mymap.put(IclijConfigConstants.DATASETMLSTOCH, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable dataset mlstoch"));
        mymap.put(IclijConfigConstants.DATASETMLSTOCHEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "dataset mlstoch evolution config"));
        mymap.put(IclijConfigConstants.DATASETMLSTOCHMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "dataset mlstoch enable"));
        mymap.put(IclijConfigConstants.DATASETMLMULTI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable dataset mlmulti"));
        mymap.put(IclijConfigConstants.DATASETMLMULTIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "dataset mlmulti evolution config"));
        mymap.put(IclijConfigConstants.DATASETMLMULTIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "dataset mlmulti enable"));
        mymap.put(IclijConfigConstants.DATASETRECOMMENDER, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable dataset evolution based"));
        mymap.put(IclijConfigConstants.DATASETPREDICTOR, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable dataset predictor"));
        mymap.put(IclijConfigConstants.DATASETPREDICTOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "dataset predictor evolution config"));
        mymap.put(IclijConfigConstants.DATASETPREDICTORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "dataset predictor ml enable"));
        mymap.put(IclijConfigConstants.EVOLVE, new IclijXMLType(null, null, null));
        mymap.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDER, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolution generated recommender settings"));
        mymap.put(IclijConfigConstants.EVOLVEML, new IclijXMLType(Boolean.class, Boolean.FALSE, "Evolve ML enable"));
        mymap.put(IclijConfigConstants.EVOLVEMLEVOLUTIONCONFIG, new IclijXMLType( String.class, "{ \"generations\" : 10, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 4, \"mutate\" : 2, \"generationcreate\" : 1 }", "ML GP config", ConfigConstants.EVOLVEMLEVOLUTIONCONFIG));
        mymap.put(IclijConfigConstants.EVOLVEMLMLCONFIG, new IclijXMLType(String.class, null, "Evolution default ml enabled"));
        mymap.put(IclijConfigConstants.EVOLVEMLTENSORFLOWSERVER, new IclijXMLType(String.class, "http://localhost:8000", "Enable evolution generated ml server", ConfigConstants.MACHINELEARNINGTENSORFLOWSERVER));
        mymap.put(IclijConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG, new IclijXMLType( String.class, "{ \"generations\" : 100, \"children\" : 4, \"crossover\" : 2, \"elite\" : 1, \"elitecloneandmutate\" : 1, \"select\" : 16, \"mutate\" : 2, \"generationcreate\" : 1 }", "Indicator recommender GP config", ConfigConstants.EVOLVEINDICATORRECOMMENDEREVOLUTIONCONFIG));
        mymap.put(IclijConfigConstants.EVOLVEAUTORUN, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable evolve autorun"));
        mymap.put(IclijConfigConstants.EVOLVEFITNESSMINIMUM, new IclijXMLType(Integer.class, 10, "Enable evolve fitness minimum"));
        mymap.put(IclijConfigConstants.EVOLVEMLINDICATOR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolve mlindicator"));
        mymap.put(IclijConfigConstants.EVOLVEMLINDICATOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "evolve mlindicator evolution config"));
        mymap.put(IclijConfigConstants.EVOLVEMLINDICATORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "evolve mlindicator ml enable"));
        mymap.put(IclijConfigConstants.EVOLVEMLMACD, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolve mlmacd"));
        mymap.put(IclijConfigConstants.EVOLVEMLMACDEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "evolve mlmacd evolution config"));
        mymap.put(IclijConfigConstants.EVOLVEMLMACDMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "evolve mlmacd enable"));
        mymap.put(IclijConfigConstants.EVOLVEMLRSI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolve mlrsi"));
        mymap.put(IclijConfigConstants.EVOLVEMLRSIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "evolve mlrsi evolution config"));
        mymap.put(IclijConfigConstants.EVOLVEMLRSIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "evolve mlrsi enable"));
        mymap.put(IclijConfigConstants.EVOLVEMLATR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolve mlatr"));
        mymap.put(IclijConfigConstants.EVOLVEMLATREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "evolve mlatr evolution config"));
        mymap.put(IclijConfigConstants.EVOLVEMLATRMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "evolve mlatr enable"));
        mymap.put(IclijConfigConstants.EVOLVEMLCCI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolve mlcci"));
        mymap.put(IclijConfigConstants.EVOLVEMLCCIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "evolve mlcci evolution config"));
        mymap.put(IclijConfigConstants.EVOLVEMLCCIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "evolve mlcci enable"));
        mymap.put(IclijConfigConstants.EVOLVEMLSTOCH, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolve mlstoch"));
        mymap.put(IclijConfigConstants.EVOLVEMLSTOCHEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "evolve mlstoch evolution config"));
        mymap.put(IclijConfigConstants.EVOLVEMLSTOCHMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "evolve mlstoch enable"));
        mymap.put(IclijConfigConstants.EVOLVEMLMULTI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolve mlmulti"));
        mymap.put(IclijConfigConstants.EVOLVEMLMULTIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "evolve mlmulti evolution config"));
        mymap.put(IclijConfigConstants.EVOLVEMLMULTIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "evolve mlmulti enable"));
        mymap.put(IclijConfigConstants.EVOLVERECOMMENDER, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable evolve evolution based"));
        mymap.put(IclijConfigConstants.EVOLVEPREDICTOR, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable evolve predictor"));
        mymap.put(IclijConfigConstants.EVOLVEPREDICTOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "evolve predictor evolution config"));
        mymap.put(IclijConfigConstants.EVOLVEPREDICTORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "evolve predictor ml enable"));
        mymap.put(IclijConfigConstants.MISCSHUTDOWNHOUR, new IclijXMLType(Integer.class, null, "Server shutdown hour"));
        mymap.put(IclijConfigConstants.MPSERVERCPU, new IclijXMLType(Double.class, 0.5, "Server cpu usage"));
        mymap.put(IclijConfigConstants.MPCLIENTCPU, new IclijXMLType(Double.class, 0.5, "Client cpu usage"));
        mymap.put(IclijConfigConstants.FINDPROFITAUTORUN, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable find profit autorun"));
        mymap.put(IclijConfigConstants.FINDPROFITMLDYNAMIC, new IclijXMLType(Boolean.class, Boolean.FALSE, "Do machine learning dynamically if no persistent present"));
        mymap.put(IclijConfigConstants.FINDPROFITMLINDICATOR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable find profit mlindicator"));
        mymap.put(IclijConfigConstants.FINDPROFITMLINDICATOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Find profit mlindicator evolution config"));
        mymap.put(IclijConfigConstants.FINDPROFITMLINDICATORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Find profit mlindicator ml enable"));
        mymap.put(IclijConfigConstants.FINDPROFITMLMACD, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable find profit mlmacd"));
        mymap.put(IclijConfigConstants.FINDPROFITMLMACDEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Find profit mlmacd evolution config"));
        mymap.put(IclijConfigConstants.FINDPROFITMLMACDMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Find profit mlmacd ml enable"));
        mymap.put(IclijConfigConstants.FINDPROFITMLRSI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable find profit mlrsi"));
        mymap.put(IclijConfigConstants.FINDPROFITMLRSIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Find profit mlrsi evolution config"));
        mymap.put(IclijConfigConstants.FINDPROFITMLRSIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Find profit mlrsi ml enable"));
        mymap.put(IclijConfigConstants.FINDPROFITMLATR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable find profit mlatr"));
        mymap.put(IclijConfigConstants.FINDPROFITMLATREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Find profit mlatr evolution config"));
        mymap.put(IclijConfigConstants.FINDPROFITMLATRMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Find profit mlatr ml enable"));
        mymap.put(IclijConfigConstants.FINDPROFITMLCCI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable find profit mlcci"));
        mymap.put(IclijConfigConstants.FINDPROFITMLCCIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Find profit mlcci evolution config"));
        mymap.put(IclijConfigConstants.FINDPROFITMLCCIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Find profit mlcci ml enable"));
        mymap.put(IclijConfigConstants.FINDPROFITMLSTOCH, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable find profit mlstoch"));
        mymap.put(IclijConfigConstants.FINDPROFITMLSTOCHEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Find profit mlstoch evolution config"));
        mymap.put(IclijConfigConstants.FINDPROFITMLSTOCHMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Find profit mlstoch ml enable"));
        mymap.put(IclijConfigConstants.FINDPROFITMLMULTI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable find profit mlmulti"));
        mymap.put(IclijConfigConstants.FINDPROFITMLMULTIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Find profit mlmulti evolution config"));
        mymap.put(IclijConfigConstants.FINDPROFITMLMULTIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Find profit mlmulti ml enable"));
        mymap.put(IclijConfigConstants.FINDPROFITRECOMMENDER, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable find profit evolution based"));
        mymap.put(IclijConfigConstants.FINDPROFITPREDICTOR, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable find profit predictor"));
        mymap.put(IclijConfigConstants.FINDPROFITPREDICTOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Find profit predictor evolution config"));
        mymap.put(IclijConfigConstants.FINDPROFITPREDICTORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Find profit predictor ml enable"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITAUTORUN, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable improve profit autorun"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITFITNESSMINIMUM, new IclijXMLType(Integer.class, 10, "Enable improve profit fitness minimum"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLINDICATOR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable improve profit mlindicator"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLINDICATOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Improve profit mlindicator evolution config"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLINDICATORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Improve profit mlindicator ml enable"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLMACD, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable improve profit mlmacd"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLMACDEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Improve profit mlmacd evolution config"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLMACDMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Improve profit mlmacd enable"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLRSI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable improve profit mlrsi"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLRSIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Improve profit mlrsi evolution config"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLRSIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Improve profit mlrsi enable"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLATR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable improve profit mlatr"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLATREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Improve profit mlatr evolution config"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLATRMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Improve profit mlatr enable"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLCCI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable improve profit mlcci"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLCCIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Improve profit mlcci evolution config"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLCCIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Improve profit mlcci enable"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLSTOCH, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable improve profit mlstoch"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLSTOCHEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Improve profit mlstoch evolution config"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLSTOCHMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Improve profit mlstoch enable"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLMULTI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable improve profit mlmulti"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLMULTIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Improve profit mlmulti evolution config"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITMLMULTIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Improve profit mlmulti enable"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITRECOMMENDER, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable improve profit evolution based"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITPREDICTOR, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable improve profit predictor"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITPREDICTOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Improve profit predictor evolution config"));
        mymap.put(IclijConfigConstants.IMPROVEPROFITPREDICTORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Improve profit predictor ml enable"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGAUTORUN, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable machine learning autorun"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLINDICATOR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable machine learning mlindicator"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLINDICATOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "machine learning mlindicator evolution config"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLINDICATORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "machine learning mlindicator ml enable"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLMACD, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable machine learning mlmacd"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLMACDEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "machine learning mlmacd evolution config"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLMACDMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "machine learning mlmacd ml enable"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLRSI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable machine learning mlrsi"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLRSIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "machine learning mlrsi evolution config"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLRSIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "machine learning mlrsi ml enable"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLATR, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable machine learning mlatr"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLATREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "machine learning mlatr evolution config"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLATRMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "machine learning mlatr ml enable"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLCCI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable machine learning mlcci"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLCCIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "machine learning mlcci evolution config"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLCCIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "machine learning mlcci ml enable"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLSTOCH, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable machine learning mlstoch"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLSTOCHEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "machine learning mlstoch evolution config"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLSTOCHMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "machine learning mlstoch ml enable"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLMULTI, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable machine learning mlmulti"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLMULTIEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "machine learning mlmulti evolution config"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGMLMULTIMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "machine learning mlmulti ml enable"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGPREDICTOR, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable machine learning predictor"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGPREDICTOREVOLUTIONCONFIG, new IclijXMLType(String.class, null, "machine learning predictor evolution config"));
        mymap.put(IclijConfigConstants.MACHINELEARNINGPREDICTORMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "machine learning predictor ml enable"));
        mymap.put(IclijConfigConstants.SINGLEMARKETEVOLVEFIRSTONLY, new IclijXMLType(Boolean.class, Boolean.TRUE, "Single market loops with evolve first only"));
        mymap.put(IclijConfigConstants.SINGLEMARKETLOOPS, new IclijXMLType(Integer.class, 5, "Single market loops"));
        mymap.put(IclijConfigConstants.SINGLEMARKETLOOPINTERVAL, new IclijXMLType(Integer.class, 20, "Single market loop interval"));
        mymap.put(IclijConfigConstants.VERIFICATION, new IclijXMLType(Boolean.class, Boolean.TRUE, "Enable verification"));
        mymap.put(IclijConfigConstants.VERIFICATIONSAVE, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable verification save"));
        mymap.put(IclijConfigConstants.VERIFICATIONDAYS, new IclijXMLType(Integer.class, 20, "Verification days"));
        mymap.put(IclijConfigConstants.VERIFICATIONEVOLVEFIRSTONLY, new IclijXMLType(Boolean.class, Boolean.TRUE, "Verification loops with evolve first only"));
        mymap.put(IclijConfigConstants.VERIFICATIONLOOPS, new IclijXMLType(Integer.class, 5, "Verification loops"));
        mymap.put(IclijConfigConstants.VERIFICATIONLOOPINTERVAL, new IclijXMLType(Integer.class, 20, "Verification loop interval"));
        mymap.put(IclijConfigConstants.VERIFICATIONRECOMMENDERTOPBOTTOM, new IclijXMLType(Integer.class, 10, "Number of entries to pick from recommender lists"));
        mymap.put(IclijConfigConstants.VERIFICATIONIMPROVEPROFIT, new IclijXMLType(Boolean.class, Boolean.FALSE, "Enable improve profit"));
        //mymap.put(IclijConfigConstants.MARKETSMARKETLISTMARKETEVOLUTIONCONFIG, new IclijXMLType(String.class, null, "Market evolution config"));        
        mymap.put(IclijConfigConstants.MARKETSMARKETLISTMARKETMLCONFIG, new IclijXMLType(String.class, MLCONFIG, "Market ML config"));        
    }
}
